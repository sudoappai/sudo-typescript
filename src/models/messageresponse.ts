/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolCall,
  ToolCall$inboundSchema,
  ToolCall$Outbound,
  ToolCall$outboundSchema,
} from "./toolcall.js";

export type MessageResponse = {
  annotations?: any | undefined;
  audio?: any | undefined;
  content?: string | null | undefined;
  refusal?: string | null | undefined;
  role: string;
  toolCalls?: Array<ToolCall> | null | undefined;
};

/** @internal */
export const MessageResponse$inboundSchema: z.ZodType<
  MessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  annotations: z.any().optional(),
  audio: z.any().optional(),
  content: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: z.string(),
  tool_calls: z.nullable(z.array(ToolCall$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type MessageResponse$Outbound = {
  annotations?: any | undefined;
  audio?: any | undefined;
  content?: string | null | undefined;
  refusal?: string | null | undefined;
  role: string;
  tool_calls?: Array<ToolCall$Outbound> | null | undefined;
};

/** @internal */
export const MessageResponse$outboundSchema: z.ZodType<
  MessageResponse$Outbound,
  z.ZodTypeDef,
  MessageResponse
> = z.object({
  annotations: z.any().optional(),
  audio: z.any().optional(),
  content: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: z.string(),
  toolCalls: z.nullable(z.array(ToolCall$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponse$ {
  /** @deprecated use `MessageResponse$inboundSchema` instead. */
  export const inboundSchema = MessageResponse$inboundSchema;
  /** @deprecated use `MessageResponse$outboundSchema` instead. */
  export const outboundSchema = MessageResponse$outboundSchema;
  /** @deprecated use `MessageResponse$Outbound` instead. */
  export type Outbound = MessageResponse$Outbound;
}

export function messageResponseToJSON(
  messageResponse: MessageResponse,
): string {
  return JSON.stringify(MessageResponse$outboundSchema.parse(messageResponse));
}

export function messageResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageResponse' from JSON`,
  );
}
