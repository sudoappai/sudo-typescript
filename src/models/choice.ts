/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MessageResponse,
  MessageResponse$inboundSchema,
  MessageResponse$Outbound,
  MessageResponse$outboundSchema,
} from "./messageresponse.js";

export type Choice = {
  finishReason: string;
  index: number;
  logprobs?: any | undefined;
  message: MessageResponse;
};

/** @internal */
export const Choice$inboundSchema: z.ZodType<Choice, z.ZodTypeDef, unknown> = z
  .object({
    finish_reason: z.string(),
    index: z.number().int(),
    logprobs: z.any().optional(),
    message: MessageResponse$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choice$Outbound = {
  finish_reason: string;
  index: number;
  logprobs?: any | undefined;
  message: MessageResponse$Outbound;
};

/** @internal */
export const Choice$outboundSchema: z.ZodType<
  Choice$Outbound,
  z.ZodTypeDef,
  Choice
> = z.object({
  finishReason: z.string(),
  index: z.number().int(),
  logprobs: z.any().optional(),
  message: MessageResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choice$ {
  /** @deprecated use `Choice$inboundSchema` instead. */
  export const inboundSchema = Choice$inboundSchema;
  /** @deprecated use `Choice$outboundSchema` instead. */
  export const outboundSchema = Choice$outboundSchema;
  /** @deprecated use `Choice$Outbound` instead. */
  export type Outbound = Choice$Outbound;
}

export function choiceToJSON(choice: Choice): string {
  return JSON.stringify(Choice$outboundSchema.parse(choice));
}

export function choiceFromJSON(
  jsonString: string,
): SafeParseResult<Choice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Choice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Choice' from JSON`,
  );
}
