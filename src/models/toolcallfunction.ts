/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ToolCallFunction = {
  arguments: string;
  name: string;
};

/** @internal */
export const ToolCallFunction$inboundSchema: z.ZodType<
  ToolCallFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  arguments: z.string(),
  name: z.string(),
});

/** @internal */
export type ToolCallFunction$Outbound = {
  arguments: string;
  name: string;
};

/** @internal */
export const ToolCallFunction$outboundSchema: z.ZodType<
  ToolCallFunction$Outbound,
  z.ZodTypeDef,
  ToolCallFunction
> = z.object({
  arguments: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCallFunction$ {
  /** @deprecated use `ToolCallFunction$inboundSchema` instead. */
  export const inboundSchema = ToolCallFunction$inboundSchema;
  /** @deprecated use `ToolCallFunction$outboundSchema` instead. */
  export const outboundSchema = ToolCallFunction$outboundSchema;
  /** @deprecated use `ToolCallFunction$Outbound` instead. */
  export type Outbound = ToolCallFunction$Outbound;
}

export function toolCallFunctionToJSON(
  toolCallFunction: ToolCallFunction,
): string {
  return JSON.stringify(
    ToolCallFunction$outboundSchema.parse(toolCallFunction),
  );
}

export function toolCallFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ToolCallFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCallFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCallFunction' from JSON`,
  );
}
