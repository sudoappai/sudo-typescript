/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolCall,
  ToolCall$inboundSchema,
  ToolCall$Outbound,
  ToolCall$outboundSchema,
} from "./toolcall.js";

/**
 * The role of the author of this message.
 */
export const Role = {
  Assistant: "assistant",
  User: "user",
  System: "system",
  Tool: "tool",
} as const;
/**
 * The role of the author of this message.
 */
export type Role = ClosedEnum<typeof Role>;

export type ChatCompletionDelta = {
  /**
   * The contents of the chunk message.
   */
  content?: string | null | undefined;
  /**
   * The role of the author of this message.
   */
  role?: Role | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls?: Array<ToolCall> | null | undefined;
  /**
   * The refusal message generated by the model.
   */
  refusal?: string | null | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ChatCompletionDelta$inboundSchema: z.ZodType<
  ChatCompletionDelta,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  role: z.nullable(Role$inboundSchema).optional(),
  tool_calls: z.nullable(z.array(ToolCall$inboundSchema)).optional(),
  refusal: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionDelta$Outbound = {
  content?: string | null | undefined;
  role?: string | null | undefined;
  tool_calls?: Array<ToolCall$Outbound> | null | undefined;
  refusal?: string | null | undefined;
};

/** @internal */
export const ChatCompletionDelta$outboundSchema: z.ZodType<
  ChatCompletionDelta$Outbound,
  z.ZodTypeDef,
  ChatCompletionDelta
> = z.object({
  content: z.nullable(z.string()).optional(),
  role: z.nullable(Role$outboundSchema).optional(),
  toolCalls: z.nullable(z.array(ToolCall$outboundSchema)).optional(),
  refusal: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionDelta$ {
  /** @deprecated use `ChatCompletionDelta$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionDelta$inboundSchema;
  /** @deprecated use `ChatCompletionDelta$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionDelta$outboundSchema;
  /** @deprecated use `ChatCompletionDelta$Outbound` instead. */
  export type Outbound = ChatCompletionDelta$Outbound;
}

export function chatCompletionDeltaToJSON(
  chatCompletionDelta: ChatCompletionDelta,
): string {
  return JSON.stringify(
    ChatCompletionDelta$outboundSchema.parse(chatCompletionDelta),
  );
}

export function chatCompletionDeltaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionDelta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionDelta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionDelta' from JSON`,
  );
}
