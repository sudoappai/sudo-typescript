/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SupportedModel = {
  createdAt: Date;
  modelName: string;
  modelProvider: string;
  sudoModelId: number;
};

/** @internal */
export const SupportedModel$inboundSchema: z.ZodType<
  SupportedModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  model_name: z.string(),
  model_provider: z.string(),
  sudo_model_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "model_name": "modelName",
    "model_provider": "modelProvider",
    "sudo_model_id": "sudoModelId",
  });
});

/** @internal */
export type SupportedModel$Outbound = {
  created_at: string;
  model_name: string;
  model_provider: string;
  sudo_model_id: number;
};

/** @internal */
export const SupportedModel$outboundSchema: z.ZodType<
  SupportedModel$Outbound,
  z.ZodTypeDef,
  SupportedModel
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modelName: z.string(),
  modelProvider: z.string(),
  sudoModelId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modelName: "model_name",
    modelProvider: "model_provider",
    sudoModelId: "sudo_model_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedModel$ {
  /** @deprecated use `SupportedModel$inboundSchema` instead. */
  export const inboundSchema = SupportedModel$inboundSchema;
  /** @deprecated use `SupportedModel$outboundSchema` instead. */
  export const outboundSchema = SupportedModel$outboundSchema;
  /** @deprecated use `SupportedModel$Outbound` instead. */
  export type Outbound = SupportedModel$Outbound;
}

export function supportedModelToJSON(supportedModel: SupportedModel): string {
  return JSON.stringify(SupportedModel$outboundSchema.parse(supportedModel));
}

export function supportedModelFromJSON(
  jsonString: string,
): SafeParseResult<SupportedModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportedModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportedModel' from JSON`,
  );
}
