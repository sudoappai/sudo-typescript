/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ImageInputTokens = {
  /**
   * Number of tokens used for image processing.
   */
  imageTokens: number;
  /**
   * Number of tokens used for text processing.
   */
  textTokens: number;
};

/** @internal */
export const ImageInputTokens$inboundSchema: z.ZodType<
  ImageInputTokens,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_tokens: z.number().int(),
  text_tokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "image_tokens": "imageTokens",
    "text_tokens": "textTokens",
  });
});

/** @internal */
export type ImageInputTokens$Outbound = {
  image_tokens: number;
  text_tokens: number;
};

/** @internal */
export const ImageInputTokens$outboundSchema: z.ZodType<
  ImageInputTokens$Outbound,
  z.ZodTypeDef,
  ImageInputTokens
> = z.object({
  imageTokens: z.number().int(),
  textTokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    imageTokens: "image_tokens",
    textTokens: "text_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageInputTokens$ {
  /** @deprecated use `ImageInputTokens$inboundSchema` instead. */
  export const inboundSchema = ImageInputTokens$inboundSchema;
  /** @deprecated use `ImageInputTokens$outboundSchema` instead. */
  export const outboundSchema = ImageInputTokens$outboundSchema;
  /** @deprecated use `ImageInputTokens$Outbound` instead. */
  export type Outbound = ImageInputTokens$Outbound;
}

export function imageInputTokensToJSON(
  imageInputTokens: ImageInputTokens,
): string {
  return JSON.stringify(
    ImageInputTokens$outboundSchema.parse(imageInputTokens),
  );
}

export function imageInputTokensFromJSON(
  jsonString: string,
): SafeParseResult<ImageInputTokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageInputTokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageInputTokens' from JSON`,
  );
}
