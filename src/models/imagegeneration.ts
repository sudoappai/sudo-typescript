/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ImageData,
  ImageData$inboundSchema,
  ImageData$Outbound,
  ImageData$outboundSchema,
} from "./imagedata.js";
import {
  ImageUsage,
  ImageUsage$inboundSchema,
  ImageUsage$Outbound,
  ImageUsage$outboundSchema,
} from "./imageusage.js";

export type ImageGeneration = {
  /**
   * Background settings used in generation (OpenAI only)
   */
  background?: string | null | undefined;
  /**
   * The Unix timestamp (in seconds) of when the image was created.
   */
  created?: number | null | undefined;
  /**
   * The output format of the generated image (OpenAI only)
   */
  outputFormat?: string | null | undefined;
  /**
   * The quality setting used for generation (OpenAI only)
   */
  quality?: string | null | undefined;
  /**
   * The size of the generated image (OpenAI only)
   */
  size?: string | null | undefined;
  usage?: ImageUsage | undefined;
  /**
   * The list of generated images.
   */
  data: Array<ImageData>;
};

/** @internal */
export const ImageGeneration$inboundSchema: z.ZodType<
  ImageGeneration,
  z.ZodTypeDef,
  unknown
> = z.object({
  background: z.nullable(z.string()).optional(),
  created: z.nullable(z.number().int()).optional(),
  output_format: z.nullable(z.string()).optional(),
  quality: z.nullable(z.string()).optional(),
  size: z.nullable(z.string()).optional(),
  usage: ImageUsage$inboundSchema.optional(),
  data: z.array(ImageData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "output_format": "outputFormat",
  });
});

/** @internal */
export type ImageGeneration$Outbound = {
  background?: string | null | undefined;
  created?: number | null | undefined;
  output_format?: string | null | undefined;
  quality?: string | null | undefined;
  size?: string | null | undefined;
  usage?: ImageUsage$Outbound | undefined;
  data: Array<ImageData$Outbound>;
};

/** @internal */
export const ImageGeneration$outboundSchema: z.ZodType<
  ImageGeneration$Outbound,
  z.ZodTypeDef,
  ImageGeneration
> = z.object({
  background: z.nullable(z.string()).optional(),
  created: z.nullable(z.number().int()).optional(),
  outputFormat: z.nullable(z.string()).optional(),
  quality: z.nullable(z.string()).optional(),
  size: z.nullable(z.string()).optional(),
  usage: ImageUsage$outboundSchema.optional(),
  data: z.array(ImageData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    outputFormat: "output_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageGeneration$ {
  /** @deprecated use `ImageGeneration$inboundSchema` instead. */
  export const inboundSchema = ImageGeneration$inboundSchema;
  /** @deprecated use `ImageGeneration$outboundSchema` instead. */
  export const outboundSchema = ImageGeneration$outboundSchema;
  /** @deprecated use `ImageGeneration$Outbound` instead. */
  export type Outbound = ImageGeneration$Outbound;
}

export function imageGenerationToJSON(
  imageGeneration: ImageGeneration,
): string {
  return JSON.stringify(ImageGeneration$outboundSchema.parse(imageGeneration));
}

export function imageGenerationFromJSON(
  jsonString: string,
): SafeParseResult<ImageGeneration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageGeneration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageGeneration' from JSON`,
  );
}
