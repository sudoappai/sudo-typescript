/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The format in which the generated images are returned. Must be one of url or b64_json. URLs are only valid for 60 minutes after the image has been generated.
 */
export const ResponseFormatEnum = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which the generated images are returned. Must be one of url or b64_json. URLs are only valid for 60 minutes after the image has been generated.
 */
export type ResponseFormatEnum = ClosedEnum<typeof ResponseFormatEnum>;

/**
 * The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.
 */
export const Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.
 */
export type Quality = ClosedEnum<typeof Quality>;

/**
 * The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.
 */
export const Size = {
  TwoHundredAndFiftySixx256: "256x256",
  FiveHundredAndTwelvex512: "512x512",
  OneThousandAndTwentyFourx1024: "1024x1024",
  OneThousandSevenHundredAndNinetyTwox1024: "1792x1024",
  OneThousandAndTwentyFourx1792: "1024x1792",
} as const;
/**
 * The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.
 */
export type Size = ClosedEnum<typeof Size>;

/**
 * The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.
 */
export const Style = {
  Vivid: "vivid",
  Natural: "natural",
} as const;
/**
 * The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.
 */
export type Style = ClosedEnum<typeof Style>;

export type ImageGenerationRequest = {
  /**
   * A text description of the desired image(s). The maximum length is 1000 characters for dall-e-2 and 4000 characters for dall-e-3.
   */
  prompt: string;
  /**
   * The model to use for image generation.
   */
  model: string;
  /**
   * The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.
   */
  n?: number | null | undefined;
  /**
   * The format in which the generated images are returned. Must be one of url or b64_json. URLs are only valid for 60 minutes after the image has been generated.
   */
  responseFormat?: ResponseFormatEnum | null | undefined;
  /**
   * The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.
   */
  quality?: Quality | null | undefined;
  /**
   * The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.
   */
  size?: Size | null | undefined;
  /**
   * The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.
   */
  style?: Style | null | undefined;
  /**
   * OpenAI only: Specify the background removal for the generated image.
   */
  background?: string | null | undefined;
  /**
   * OpenAI only: Content moderation settings for the image generation.
   */
  moderation?: string | null | undefined;
  /**
   * OpenAI only: Compression level for the output image, from 0 to 100.
   */
  outputCompression?: number | null | undefined;
  /**
   * OpenAI only: The output format for the generated image.
   */
  outputFormat?: string | null | undefined;
};

/** @internal */
export const ResponseFormatEnum$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatEnum
> = z.nativeEnum(ResponseFormatEnum);

/** @internal */
export const ResponseFormatEnum$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatEnum
> = ResponseFormatEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatEnum$ {
  /** @deprecated use `ResponseFormatEnum$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatEnum$inboundSchema;
  /** @deprecated use `ResponseFormatEnum$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatEnum$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const Style$inboundSchema: z.ZodNativeEnum<typeof Style> = z.nativeEnum(
  Style,
);

/** @internal */
export const Style$outboundSchema: z.ZodNativeEnum<typeof Style> =
  Style$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Style$ {
  /** @deprecated use `Style$inboundSchema` instead. */
  export const inboundSchema = Style$inboundSchema;
  /** @deprecated use `Style$outboundSchema` instead. */
  export const outboundSchema = Style$outboundSchema;
}

/** @internal */
export const ImageGenerationRequest$inboundSchema: z.ZodType<
  ImageGenerationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  response_format: z.nullable(ResponseFormatEnum$inboundSchema).optional(),
  quality: z.nullable(Quality$inboundSchema).optional(),
  size: z.nullable(Size$inboundSchema).optional(),
  style: z.nullable(Style$inboundSchema).optional(),
  background: z.nullable(z.string()).optional(),
  moderation: z.nullable(z.string()).optional(),
  output_compression: z.nullable(z.number().int()).optional(),
  output_format: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
    "output_compression": "outputCompression",
    "output_format": "outputFormat",
  });
});

/** @internal */
export type ImageGenerationRequest$Outbound = {
  prompt: string;
  model: string;
  n?: number | null | undefined;
  response_format?: string | null | undefined;
  quality?: string | null | undefined;
  size?: string | null | undefined;
  style?: string | null | undefined;
  background?: string | null | undefined;
  moderation?: string | null | undefined;
  output_compression?: number | null | undefined;
  output_format?: string | null | undefined;
};

/** @internal */
export const ImageGenerationRequest$outboundSchema: z.ZodType<
  ImageGenerationRequest$Outbound,
  z.ZodTypeDef,
  ImageGenerationRequest
> = z.object({
  prompt: z.string(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  responseFormat: z.nullable(ResponseFormatEnum$outboundSchema).optional(),
  quality: z.nullable(Quality$outboundSchema).optional(),
  size: z.nullable(Size$outboundSchema).optional(),
  style: z.nullable(Style$outboundSchema).optional(),
  background: z.nullable(z.string()).optional(),
  moderation: z.nullable(z.string()).optional(),
  outputCompression: z.nullable(z.number().int()).optional(),
  outputFormat: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
    outputCompression: "output_compression",
    outputFormat: "output_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageGenerationRequest$ {
  /** @deprecated use `ImageGenerationRequest$inboundSchema` instead. */
  export const inboundSchema = ImageGenerationRequest$inboundSchema;
  /** @deprecated use `ImageGenerationRequest$outboundSchema` instead. */
  export const outboundSchema = ImageGenerationRequest$outboundSchema;
  /** @deprecated use `ImageGenerationRequest$Outbound` instead. */
  export type Outbound = ImageGenerationRequest$Outbound;
}

export function imageGenerationRequestToJSON(
  imageGenerationRequest: ImageGenerationRequest,
): string {
  return JSON.stringify(
    ImageGenerationRequest$outboundSchema.parse(imageGenerationRequest),
  );
}

export function imageGenerationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ImageGenerationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageGenerationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageGenerationRequest' from JSON`,
  );
}
