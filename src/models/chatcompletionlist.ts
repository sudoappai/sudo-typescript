/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletion,
  ChatCompletion$inboundSchema,
  ChatCompletion$Outbound,
  ChatCompletion$outboundSchema,
} from "./chatcompletion.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionList = {
  data: Array<ChatCompletion>;
  firstId: string;
  hasMore: boolean;
  lastId: string;
  object: string;
};

/** @internal */
export const ChatCompletionList$inboundSchema: z.ZodType<
  ChatCompletionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(ChatCompletion$inboundSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_id": "firstId",
    "has_more": "hasMore",
    "last_id": "lastId",
  });
});

/** @internal */
export type ChatCompletionList$Outbound = {
  data: Array<ChatCompletion$Outbound>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

/** @internal */
export const ChatCompletionList$outboundSchema: z.ZodType<
  ChatCompletionList$Outbound,
  z.ZodTypeDef,
  ChatCompletionList
> = z.object({
  data: z.array(ChatCompletion$outboundSchema),
  firstId: z.string(),
  hasMore: z.boolean(),
  lastId: z.string(),
  object: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstId: "first_id",
    hasMore: "has_more",
    lastId: "last_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionList$ {
  /** @deprecated use `ChatCompletionList$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionList$inboundSchema;
  /** @deprecated use `ChatCompletionList$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionList$outboundSchema;
  /** @deprecated use `ChatCompletionList$Outbound` instead. */
  export type Outbound = ChatCompletionList$Outbound;
}

export function chatCompletionListToJSON(
  chatCompletionList: ChatCompletionList,
): string {
  return JSON.stringify(
    ChatCompletionList$outboundSchema.parse(chatCompletionList),
  );
}

export function chatCompletionListFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionList' from JSON`,
  );
}
