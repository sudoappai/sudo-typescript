/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SupportedModel,
  SupportedModel$inboundSchema,
  SupportedModel$Outbound,
  SupportedModel$outboundSchema,
} from "./supportedmodel.js";

export type SupportedModelsList = {
  data: Array<SupportedModel>;
  firstId: string;
  hasMore: boolean;
  lastId: string;
};

/** @internal */
export const SupportedModelsList$inboundSchema: z.ZodType<
  SupportedModelsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(SupportedModel$inboundSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_id": "firstId",
    "has_more": "hasMore",
    "last_id": "lastId",
  });
});

/** @internal */
export type SupportedModelsList$Outbound = {
  data: Array<SupportedModel$Outbound>;
  first_id: string;
  has_more: boolean;
  last_id: string;
};

/** @internal */
export const SupportedModelsList$outboundSchema: z.ZodType<
  SupportedModelsList$Outbound,
  z.ZodTypeDef,
  SupportedModelsList
> = z.object({
  data: z.array(SupportedModel$outboundSchema),
  firstId: z.string(),
  hasMore: z.boolean(),
  lastId: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstId: "first_id",
    hasMore: "has_more",
    lastId: "last_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedModelsList$ {
  /** @deprecated use `SupportedModelsList$inboundSchema` instead. */
  export const inboundSchema = SupportedModelsList$inboundSchema;
  /** @deprecated use `SupportedModelsList$outboundSchema` instead. */
  export const outboundSchema = SupportedModelsList$outboundSchema;
  /** @deprecated use `SupportedModelsList$Outbound` instead. */
  export type Outbound = SupportedModelsList$Outbound;
}

export function supportedModelsListToJSON(
  supportedModelsList: SupportedModelsList,
): string {
  return JSON.stringify(
    SupportedModelsList$outboundSchema.parse(supportedModelsList),
  );
}

export function supportedModelsListFromJSON(
  jsonString: string,
): SafeParseResult<SupportedModelsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportedModelsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportedModelsList' from JSON`,
  );
}
