/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";

/**
 * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
 */
export const ChatCompletionRequestJsonFormat = {
  Wav: "wav",
  Mp3: "mp3",
  Flac: "flac",
  Opus: "opus",
  Pcm16: "pcm16",
} as const;
/**
 * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
 */
export type ChatCompletionRequestJsonFormat = ClosedEnum<
  typeof ChatCompletionRequestJsonFormat
>;

/**
 * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
 */
export const ChatCompletionRequestJsonVoice = {
  Alloy: "alloy",
  Echo: "echo",
  Fable: "fable",
  Onyx: "onyx",
  Nova: "nova",
  Shimmer: "shimmer",
} as const;
/**
 * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
 */
export type ChatCompletionRequestJsonVoice = ClosedEnum<
  typeof ChatCompletionRequestJsonVoice
>;

/**
 * Parameters for audio output. Required when audio output is requested with modalities: ["audio"].
 */
export type ChatCompletionRequestJsonAudio = {
  /**
   * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
   */
  format?: ChatCompletionRequestJsonFormat | undefined;
  /**
   * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
   */
  voice?: ChatCompletionRequestJsonVoice | undefined;
};

export const ChatCompletionRequestJsonModality = {
  Text: "text",
  Audio: "audio",
} as const;
export type ChatCompletionRequestJsonModality = ClosedEnum<
  typeof ChatCompletionRequestJsonModality
>;

export const ChatCompletionRequestJsonTypeContent = {
  Content: "content",
} as const;
export type ChatCompletionRequestJsonTypeContent = ClosedEnum<
  typeof ChatCompletionRequestJsonTypeContent
>;

/**
 * Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.
 */
export type ChatCompletionRequestJsonPrediction = {
  type?: ChatCompletionRequestJsonTypeContent | undefined;
  /**
   * The predicted content for the completion.
   */
  content?: string | undefined;
};

/**
 * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const ChatCompletionRequestJsonReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type ChatCompletionRequestJsonReasoningEffort = ClosedEnum<
  typeof ChatCompletionRequestJsonReasoningEffort
>;

export const ChatCompletionRequestJSONTypeJSONSchema = {
  JsonSchema: "json_schema",
} as const;
export type ChatCompletionRequestJSONTypeJSONSchema = ClosedEnum<
  typeof ChatCompletionRequestJSONTypeJSONSchema
>;

/**
 * The JSON schema definition for structured outputs.
 */
export type ChatCompletionRequestJsonJsonSchema = {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for, used by the model to determine how to respond in the format.
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object.
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict schema adherence when generating the output.
   */
  strict?: boolean | undefined;
};

export type ChatCompletionRequestJSONResponseFormatJSONSchema = {
  type: ChatCompletionRequestJSONTypeJSONSchema;
  /**
   * The JSON schema definition for structured outputs.
   */
  jsonSchema: ChatCompletionRequestJsonJsonSchema;
};

export const ChatCompletionRequestJSONTypeJSONObject = {
  JsonObject: "json_object",
} as const;
export type ChatCompletionRequestJSONTypeJSONObject = ClosedEnum<
  typeof ChatCompletionRequestJSONTypeJSONObject
>;

export type ChatCompletionRequestJSONResponseFormatJSONObject = {
  type: ChatCompletionRequestJSONTypeJSONObject;
};

export const ChatCompletionRequestJsonTypeText = {
  Text: "text",
} as const;
export type ChatCompletionRequestJsonTypeText = ClosedEnum<
  typeof ChatCompletionRequestJsonTypeText
>;

export type ChatCompletionRequestJsonResponseFormatText = {
  type: ChatCompletionRequestJsonTypeText;
};

/**
 * An object specifying the format that the model must output. Compatible with GPT-4o, GPT-4o mini, GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106. Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which guarantee the model will match your supplied JSON schema. Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
 */
export type ChatCompletionRequestJsonResponseFormatUnion =
  | ChatCompletionRequestJSONResponseFormatJSONSchema
  | ChatCompletionRequestJsonResponseFormatText
  | ChatCompletionRequestJSONResponseFormatJSONObject;

/**
 * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
 */
export const ChatCompletionRequestJsonServiceTier = {
  Auto: "auto",
  Default: "default",
} as const;
/**
 * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
 */
export type ChatCompletionRequestJsonServiceTier = ClosedEnum<
  typeof ChatCompletionRequestJsonServiceTier
>;

/**
 * Options for streaming response. Only set this when you set stream: true.
 */
export type ChatCompletionRequestJsonStreamOptions = {
  /**
   * If set, an additional chunk will be streamed before the data: [DONE] message. The usage field on this chunk shows the token usage statistics for the entire request, and the choices field will always be an empty array. All other chunks will also include a usage field, but with a null value.
   */
  includeUsage?: boolean | undefined;
};

export const ChatCompletionRequestJsonToolChoiceType = {
  Function: "function",
} as const;
export type ChatCompletionRequestJsonToolChoiceType = ClosedEnum<
  typeof ChatCompletionRequestJsonToolChoiceType
>;

export type ChatCompletionRequestJsonFunction = {
  name: string;
};

export type ChatCompletionRequestJsonToolChoiceFunction = {
  type: ChatCompletionRequestJsonToolChoiceType;
  function: ChatCompletionRequestJsonFunction;
};

export const ChatCompletionRequestJsonToolChoiceEnum = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
export type ChatCompletionRequestJsonToolChoiceEnum = ClosedEnum<
  typeof ChatCompletionRequestJsonToolChoiceEnum
>;

/**
 * Controls which (if any) tool is called by the model. none means the model won't call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool. none is the default when no tools are present. auto is the default if tools are present.
 */
export type ChatCompletionRequestJsonToolChoiceUnion =
  | ChatCompletionRequestJsonToolChoiceFunction
  | ChatCompletionRequestJsonToolChoiceEnum;

export type ChatCompletionRequestJson = {
  /**
   * Parameters for audio output. Required when audio output is requested with modalities: ["audio"].
   */
  audio?: ChatCompletionRequestJsonAudio | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
   */
  logitBias?: { [k: string]: number } | null | undefined;
  /**
   * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
   */
  logprobs?: boolean | null | undefined;
  /**
   * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio.
   */
  messages: Array<ChatMessage>;
  /**
   * Developer-defined tags and values used for filtering completions in the stored completions dashboard.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default: ["text"]. The gpt-4o-audio-preview model can also be used to generate audio. To request that this model generate both text and audio responses, you can use: ["text", "audio"].
   */
  modalities?: Array<ChatCompletionRequestJsonModality> | null | undefined;
  /**
   * Model name used to generate the response, like gpt-4o or deepseek-reasoner. Sudo offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [docs](https://docs.sudoapp.dev/overview/models) to browse and compare available models.
   */
  model: string;
  /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
   */
  n?: number | null | undefined;
  /**
   * Whether to enable parallel function calling during tool use.
   */
  parallelToolCalls?: boolean | null | undefined;
  /**
   * Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.
   */
  prediction?: ChatCompletionRequestJsonPrediction | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * A unique identifier for caching prompts to improve response times for repeated requests.
   */
  promptCacheKey?: string | null | undefined;
  /**
   * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: ChatCompletionRequestJsonReasoningEffort | null | undefined;
  /**
   * An object specifying the format that the model must output. Compatible with GPT-4o, GPT-4o mini, GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106. Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which guarantee the model will match your supplied JSON schema. Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
   */
  responseFormat?:
    | ChatCompletionRequestJSONResponseFormatJSONSchema
    | ChatCompletionRequestJsonResponseFormatText
    | ChatCompletionRequestJSONResponseFormatJSONObject
    | null
    | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism isn't guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
   */
  seed?: number | null | undefined;
  /**
   * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
   */
  serviceTier?: ChatCompletionRequestJsonServiceTier | null | undefined;
  /**
   * Not supported with latest reasoning models o3 and o4-mini. Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
   */
  stop?: Array<string> | null | undefined;
  /**
   * Whether or not to store the output of this chat completion request for use in our model distillation or evaluation products.
   */
  store?: boolean | null | undefined;
  /**
   * If set, partial message deltas will be sent, like in ChatGPT. For JSON responses, this must be false.
   */
  stream?: boolean | undefined;
  /**
   * Options for streaming response. Only set this when you set stream: true.
   */
  streamOptions?: ChatCompletionRequestJsonStreamOptions | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
   */
  temperature?: number | null | undefined;
  /**
   * Controls which (if any) tool is called by the model. none means the model won't call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool. none is the default when no tools are present. auto is the default if tools are present.
   */
  toolChoice?:
    | ChatCompletionRequestJsonToolChoiceFunction
    | ChatCompletionRequestJsonToolChoiceEnum
    | null
    | undefined;
  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
   */
  tools?: Array<Tool> | null | undefined;
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
   */
  topLogprobs?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
   */
  topP?: number | null | undefined;
};

/** @internal */
export const ChatCompletionRequestJsonFormat$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonFormat
> = z.nativeEnum(ChatCompletionRequestJsonFormat);

/** @internal */
export const ChatCompletionRequestJsonFormat$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonFormat
> = ChatCompletionRequestJsonFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonFormat$ {
  /** @deprecated use `ChatCompletionRequestJsonFormat$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonFormat$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonFormat$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestJsonFormat$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonVoice$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonVoice
> = z.nativeEnum(ChatCompletionRequestJsonVoice);

/** @internal */
export const ChatCompletionRequestJsonVoice$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonVoice
> = ChatCompletionRequestJsonVoice$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonVoice$ {
  /** @deprecated use `ChatCompletionRequestJsonVoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonVoice$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonVoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestJsonVoice$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonAudio$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: ChatCompletionRequestJsonFormat$inboundSchema.optional(),
  voice: ChatCompletionRequestJsonVoice$inboundSchema.optional(),
});

/** @internal */
export type ChatCompletionRequestJsonAudio$Outbound = {
  format?: string | undefined;
  voice?: string | undefined;
};

/** @internal */
export const ChatCompletionRequestJsonAudio$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonAudio$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonAudio
> = z.object({
  format: ChatCompletionRequestJsonFormat$outboundSchema.optional(),
  voice: ChatCompletionRequestJsonVoice$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonAudio$ {
  /** @deprecated use `ChatCompletionRequestJsonAudio$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonAudio$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonAudio$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestJsonAudio$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonAudio$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonAudio$Outbound;
}

export function chatCompletionRequestJsonAudioToJSON(
  chatCompletionRequestJsonAudio: ChatCompletionRequestJsonAudio,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonAudio$outboundSchema.parse(
      chatCompletionRequestJsonAudio,
    ),
  );
}

export function chatCompletionRequestJsonAudioFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJsonAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionRequestJsonAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJsonAudio' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonModality$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonModality
> = z.nativeEnum(ChatCompletionRequestJsonModality);

/** @internal */
export const ChatCompletionRequestJsonModality$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonModality
> = ChatCompletionRequestJsonModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonModality$ {
  /** @deprecated use `ChatCompletionRequestJsonModality$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonModality$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonModality$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonModality$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonTypeContent$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonTypeContent> = z.nativeEnum(
    ChatCompletionRequestJsonTypeContent,
  );

/** @internal */
export const ChatCompletionRequestJsonTypeContent$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonTypeContent> =
    ChatCompletionRequestJsonTypeContent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonTypeContent$ {
  /** @deprecated use `ChatCompletionRequestJsonTypeContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonTypeContent$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonTypeContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonTypeContent$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonPrediction$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonPrediction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChatCompletionRequestJsonTypeContent$inboundSchema.optional(),
  content: z.string().optional(),
});

/** @internal */
export type ChatCompletionRequestJsonPrediction$Outbound = {
  type?: string | undefined;
  content?: string | undefined;
};

/** @internal */
export const ChatCompletionRequestJsonPrediction$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonPrediction$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonPrediction
> = z.object({
  type: ChatCompletionRequestJsonTypeContent$outboundSchema.optional(),
  content: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonPrediction$ {
  /** @deprecated use `ChatCompletionRequestJsonPrediction$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonPrediction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonPrediction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonPrediction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonPrediction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonPrediction$Outbound;
}

export function chatCompletionRequestJsonPredictionToJSON(
  chatCompletionRequestJsonPrediction: ChatCompletionRequestJsonPrediction,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonPrediction$outboundSchema.parse(
      chatCompletionRequestJsonPrediction,
    ),
  );
}

export function chatCompletionRequestJsonPredictionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJsonPrediction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonPrediction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJsonPrediction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonReasoningEffort> = z
    .nativeEnum(ChatCompletionRequestJsonReasoningEffort);

/** @internal */
export const ChatCompletionRequestJsonReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonReasoningEffort> =
    ChatCompletionRequestJsonReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonReasoningEffort$ {
  /** @deprecated use `ChatCompletionRequestJsonReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonReasoningEffort$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJSONTypeJSONSchema$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJSONTypeJSONSchema> = z
    .nativeEnum(ChatCompletionRequestJSONTypeJSONSchema);

/** @internal */
export const ChatCompletionRequestJSONTypeJSONSchema$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJSONTypeJSONSchema> =
    ChatCompletionRequestJSONTypeJSONSchema$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJSONTypeJSONSchema$ {
  /** @deprecated use `ChatCompletionRequestJSONTypeJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJSONTypeJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONTypeJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJSONTypeJSONSchema$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonJsonSchema$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.boolean().optional(),
});

/** @internal */
export type ChatCompletionRequestJsonJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict?: boolean | undefined;
};

/** @internal */
export const ChatCompletionRequestJsonJsonSchema$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonJsonSchema$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonJsonSchema$ {
  /** @deprecated use `ChatCompletionRequestJsonJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonJsonSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonJsonSchema$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonJsonSchema$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonJsonSchema$Outbound;
}

export function chatCompletionRequestJsonJsonSchemaToJSON(
  chatCompletionRequestJsonJsonSchema: ChatCompletionRequestJsonJsonSchema,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonJsonSchema$outboundSchema.parse(
      chatCompletionRequestJsonJsonSchema,
    ),
  );
}

export function chatCompletionRequestJsonJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJsonJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJsonJsonSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema:
  z.ZodType<
    ChatCompletionRequestJSONResponseFormatJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestJSONTypeJSONSchema$inboundSchema,
    json_schema: z.lazy(() =>
      ChatCompletionRequestJsonJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound = {
  type: string;
  json_schema: ChatCompletionRequestJsonJsonSchema$Outbound;
};

/** @internal */
export const ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema:
  z.ZodType<
    ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestJSONResponseFormatJSONSchema
  > = z.object({
    type: ChatCompletionRequestJSONTypeJSONSchema$outboundSchema,
    jsonSchema: z.lazy(() =>
      ChatCompletionRequestJsonJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJSONResponseFormatJSONSchema$ {
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound =
    ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound;
}

export function chatCompletionRequestJSONResponseFormatJSONSchemaToJSON(
  chatCompletionRequestJSONResponseFormatJSONSchema:
    ChatCompletionRequestJSONResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema.parse(
      chatCompletionRequestJSONResponseFormatJSONSchema,
    ),
  );
}

export function chatCompletionRequestJSONResponseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJSONResponseFormatJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJSONResponseFormatJSONSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJSONTypeJSONObject$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJSONTypeJSONObject> = z
    .nativeEnum(ChatCompletionRequestJSONTypeJSONObject);

/** @internal */
export const ChatCompletionRequestJSONTypeJSONObject$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJSONTypeJSONObject> =
    ChatCompletionRequestJSONTypeJSONObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJSONTypeJSONObject$ {
  /** @deprecated use `ChatCompletionRequestJSONTypeJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJSONTypeJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONTypeJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJSONTypeJSONObject$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    ChatCompletionRequestJSONResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestJSONTypeJSONObject$inboundSchema,
  });

/** @internal */
export type ChatCompletionRequestJSONResponseFormatJSONObject$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    ChatCompletionRequestJSONResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestJSONResponseFormatJSONObject
  > = z.object({
    type: ChatCompletionRequestJSONTypeJSONObject$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJSONResponseFormatJSONObject$ {
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJSONResponseFormatJSONObject$Outbound` instead. */
  export type Outbound =
    ChatCompletionRequestJSONResponseFormatJSONObject$Outbound;
}

export function chatCompletionRequestJSONResponseFormatJSONObjectToJSON(
  chatCompletionRequestJSONResponseFormatJSONObject:
    ChatCompletionRequestJSONResponseFormatJSONObject,
): string {
  return JSON.stringify(
    ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema.parse(
      chatCompletionRequestJSONResponseFormatJSONObject,
    ),
  );
}

export function chatCompletionRequestJSONResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJSONResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJSONResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonTypeText$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonTypeText
> = z.nativeEnum(ChatCompletionRequestJsonTypeText);

/** @internal */
export const ChatCompletionRequestJsonTypeText$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestJsonTypeText
> = ChatCompletionRequestJsonTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonTypeText$ {
  /** @deprecated use `ChatCompletionRequestJsonTypeText$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonTypeText$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonTypeText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonTypeText$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonResponseFormatText$inboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonResponseFormatText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestJsonTypeText$inboundSchema,
  });

/** @internal */
export type ChatCompletionRequestJsonResponseFormatText$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionRequestJsonResponseFormatText$outboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonResponseFormatText$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestJsonResponseFormatText
  > = z.object({
    type: ChatCompletionRequestJsonTypeText$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonResponseFormatText$ {
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonResponseFormatText$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonResponseFormatText$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatText$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonResponseFormatText$Outbound;
}

export function chatCompletionRequestJsonResponseFormatTextToJSON(
  chatCompletionRequestJsonResponseFormatText:
    ChatCompletionRequestJsonResponseFormatText,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonResponseFormatText$outboundSchema.parse(
      chatCompletionRequestJsonResponseFormatText,
    ),
  );
}

export function chatCompletionRequestJsonResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJsonResponseFormatText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonResponseFormatText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJsonResponseFormatText' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonResponseFormatUnion$inboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonResponseFormatUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() => ChatCompletionRequestJsonResponseFormatText$inboundSchema),
    z.lazy(() =>
      ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema
    ),
  ]);

/** @internal */
export type ChatCompletionRequestJsonResponseFormatUnion$Outbound =
  | ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound
  | ChatCompletionRequestJsonResponseFormatText$Outbound
  | ChatCompletionRequestJSONResponseFormatJSONObject$Outbound;

/** @internal */
export const ChatCompletionRequestJsonResponseFormatUnion$outboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonResponseFormatUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestJsonResponseFormatUnion
  > = z.union([
    z.lazy(() =>
      ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() => ChatCompletionRequestJsonResponseFormatText$outboundSchema),
    z.lazy(() =>
      ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonResponseFormatUnion$ {
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonResponseFormatUnion$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonResponseFormatUnion$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonResponseFormatUnion$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonResponseFormatUnion$Outbound;
}

export function chatCompletionRequestJsonResponseFormatUnionToJSON(
  chatCompletionRequestJsonResponseFormatUnion:
    ChatCompletionRequestJsonResponseFormatUnion,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonResponseFormatUnion$outboundSchema.parse(
      chatCompletionRequestJsonResponseFormatUnion,
    ),
  );
}

export function chatCompletionRequestJsonResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJsonResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJsonResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonServiceTier$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonServiceTier> = z.nativeEnum(
    ChatCompletionRequestJsonServiceTier,
  );

/** @internal */
export const ChatCompletionRequestJsonServiceTier$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonServiceTier> =
    ChatCompletionRequestJsonServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonServiceTier$ {
  /** @deprecated use `ChatCompletionRequestJsonServiceTier$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonServiceTier$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonServiceTier$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonStreamOptions$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonStreamOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type ChatCompletionRequestJsonStreamOptions$Outbound = {
  include_usage?: boolean | undefined;
};

/** @internal */
export const ChatCompletionRequestJsonStreamOptions$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonStreamOptions$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonStreamOptions
> = z.object({
  includeUsage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonStreamOptions$ {
  /** @deprecated use `ChatCompletionRequestJsonStreamOptions$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonStreamOptions$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonStreamOptions$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonStreamOptions$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonStreamOptions$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonStreamOptions$Outbound;
}

export function chatCompletionRequestJsonStreamOptionsToJSON(
  chatCompletionRequestJsonStreamOptions:
    ChatCompletionRequestJsonStreamOptions,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonStreamOptions$outboundSchema.parse(
      chatCompletionRequestJsonStreamOptions,
    ),
  );
}

export function chatCompletionRequestJsonStreamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJsonStreamOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonStreamOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJsonStreamOptions' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonToolChoiceType$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonToolChoiceType> = z
    .nativeEnum(ChatCompletionRequestJsonToolChoiceType);

/** @internal */
export const ChatCompletionRequestJsonToolChoiceType$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonToolChoiceType> =
    ChatCompletionRequestJsonToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonToolChoiceType$ {
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceType$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonToolChoiceType$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceType$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonToolChoiceType$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonFunction$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ChatCompletionRequestJsonFunction$Outbound = {
  name: string;
};

/** @internal */
export const ChatCompletionRequestJsonFunction$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonFunction$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonFunction
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonFunction$ {
  /** @deprecated use `ChatCompletionRequestJsonFunction$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJsonFunction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonFunction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonFunction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonFunction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonFunction$Outbound;
}

export function chatCompletionRequestJsonFunctionToJSON(
  chatCompletionRequestJsonFunction: ChatCompletionRequestJsonFunction,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonFunction$outboundSchema.parse(
      chatCompletionRequestJsonFunction,
    ),
  );
}

export function chatCompletionRequestJsonFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJsonFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionRequestJsonFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJsonFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonToolChoiceFunction$inboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonToolChoiceFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestJsonToolChoiceType$inboundSchema,
    function: z.lazy(() => ChatCompletionRequestJsonFunction$inboundSchema),
  });

/** @internal */
export type ChatCompletionRequestJsonToolChoiceFunction$Outbound = {
  type: string;
  function: ChatCompletionRequestJsonFunction$Outbound;
};

/** @internal */
export const ChatCompletionRequestJsonToolChoiceFunction$outboundSchema:
  z.ZodType<
    ChatCompletionRequestJsonToolChoiceFunction$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestJsonToolChoiceFunction
  > = z.object({
    type: ChatCompletionRequestJsonToolChoiceType$outboundSchema,
    function: z.lazy(() => ChatCompletionRequestJsonFunction$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonToolChoiceFunction$ {
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonToolChoiceFunction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonToolChoiceFunction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceFunction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonToolChoiceFunction$Outbound;
}

export function chatCompletionRequestJsonToolChoiceFunctionToJSON(
  chatCompletionRequestJsonToolChoiceFunction:
    ChatCompletionRequestJsonToolChoiceFunction,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonToolChoiceFunction$outboundSchema.parse(
      chatCompletionRequestJsonToolChoiceFunction,
    ),
  );
}

export function chatCompletionRequestJsonToolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJsonToolChoiceFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonToolChoiceFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJsonToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJsonToolChoiceEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonToolChoiceEnum> = z
    .nativeEnum(ChatCompletionRequestJsonToolChoiceEnum);

/** @internal */
export const ChatCompletionRequestJsonToolChoiceEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestJsonToolChoiceEnum> =
    ChatCompletionRequestJsonToolChoiceEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonToolChoiceEnum$ {
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonToolChoiceEnum$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonToolChoiceEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestJsonToolChoiceUnion$inboundSchema: z.ZodType<
  ChatCompletionRequestJsonToolChoiceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ChatCompletionRequestJsonToolChoiceFunction$inboundSchema),
  ChatCompletionRequestJsonToolChoiceEnum$inboundSchema,
]);

/** @internal */
export type ChatCompletionRequestJsonToolChoiceUnion$Outbound =
  | ChatCompletionRequestJsonToolChoiceFunction$Outbound
  | string;

/** @internal */
export const ChatCompletionRequestJsonToolChoiceUnion$outboundSchema: z.ZodType<
  ChatCompletionRequestJsonToolChoiceUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJsonToolChoiceUnion
> = z.union([
  z.lazy(() => ChatCompletionRequestJsonToolChoiceFunction$outboundSchema),
  ChatCompletionRequestJsonToolChoiceEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJsonToolChoiceUnion$ {
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestJsonToolChoiceUnion$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestJsonToolChoiceUnion$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJsonToolChoiceUnion$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJsonToolChoiceUnion$Outbound;
}

export function chatCompletionRequestJsonToolChoiceUnionToJSON(
  chatCompletionRequestJsonToolChoiceUnion:
    ChatCompletionRequestJsonToolChoiceUnion,
): string {
  return JSON.stringify(
    ChatCompletionRequestJsonToolChoiceUnion$outboundSchema.parse(
      chatCompletionRequestJsonToolChoiceUnion,
    ),
  );
}

export function chatCompletionRequestJsonToolChoiceUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestJsonToolChoiceUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestJsonToolChoiceUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestJsonToolChoiceUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestJson$inboundSchema: z.ZodType<
  ChatCompletionRequestJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio: z.nullable(z.lazy(() => ChatCompletionRequestJsonAudio$inboundSchema))
    .optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  max_completion_tokens: z.nullable(z.number().int()).optional(),
  messages: z.array(ChatMessage$inboundSchema),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionRequestJsonModality$inboundSchema),
  ).optional(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  parallel_tool_calls: z.nullable(z.boolean()).optional(),
  prediction: z.nullable(
    z.lazy(() => ChatCompletionRequestJsonPrediction$inboundSchema),
  ).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  prompt_cache_key: z.nullable(z.string()).optional(),
  reasoning_effort: z.nullable(
    ChatCompletionRequestJsonReasoningEffort$inboundSchema,
  ).optional(),
  response_format: z.nullable(
    z.union([
      z.lazy(() =>
        ChatCompletionRequestJSONResponseFormatJSONSchema$inboundSchema
      ),
      z.lazy(() => ChatCompletionRequestJsonResponseFormatText$inboundSchema),
      z.lazy(() =>
        ChatCompletionRequestJSONResponseFormatJSONObject$inboundSchema
      ),
    ]),
  ).optional(),
  seed: z.nullable(z.number().int()).optional(),
  service_tier: z.nullable(ChatCompletionRequestJsonServiceTier$inboundSchema)
    .optional(),
  stop: z.nullable(z.array(z.string())).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream: z.boolean().default(false),
  stream_options: z.nullable(
    z.lazy(() => ChatCompletionRequestJsonStreamOptions$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number()).optional(),
  tool_choice: z.nullable(
    z.union([
      z.lazy(() => ChatCompletionRequestJsonToolChoiceFunction$inboundSchema),
      ChatCompletionRequestJsonToolChoiceEnum$inboundSchema,
    ]),
  ).optional(),
  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),
  top_logprobs: z.nullable(z.number().int()).optional(),
  top_p: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "max_completion_tokens": "maxCompletionTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "presence_penalty": "presencePenalty",
    "prompt_cache_key": "promptCacheKey",
    "reasoning_effort": "reasoningEffort",
    "response_format": "responseFormat",
    "service_tier": "serviceTier",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_logprobs": "topLogprobs",
    "top_p": "topP",
  });
});

/** @internal */
export type ChatCompletionRequestJson$Outbound = {
  audio?: ChatCompletionRequestJsonAudio$Outbound | null | undefined;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  max_completion_tokens?: number | null | undefined;
  messages: Array<ChatMessage$Outbound>;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<string> | null | undefined;
  model: string;
  n?: number | null | undefined;
  parallel_tool_calls?: boolean | null | undefined;
  prediction?: ChatCompletionRequestJsonPrediction$Outbound | null | undefined;
  presence_penalty?: number | null | undefined;
  prompt_cache_key?: string | null | undefined;
  reasoning_effort?: string | null | undefined;
  response_format?:
    | ChatCompletionRequestJSONResponseFormatJSONSchema$Outbound
    | ChatCompletionRequestJsonResponseFormatText$Outbound
    | ChatCompletionRequestJSONResponseFormatJSONObject$Outbound
    | null
    | undefined;
  seed?: number | null | undefined;
  service_tier?: string | null | undefined;
  stop?: Array<string> | null | undefined;
  store?: boolean | null | undefined;
  stream: boolean;
  stream_options?:
    | ChatCompletionRequestJsonStreamOptions$Outbound
    | null
    | undefined;
  temperature?: number | null | undefined;
  tool_choice?:
    | ChatCompletionRequestJsonToolChoiceFunction$Outbound
    | string
    | null
    | undefined;
  tools?: Array<Tool$Outbound> | null | undefined;
  top_logprobs?: number | null | undefined;
  top_p?: number | null | undefined;
};

/** @internal */
export const ChatCompletionRequestJson$outboundSchema: z.ZodType<
  ChatCompletionRequestJson$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestJson
> = z.object({
  audio: z.nullable(z.lazy(() => ChatCompletionRequestJsonAudio$outboundSchema))
    .optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  maxCompletionTokens: z.nullable(z.number().int()).optional(),
  messages: z.array(ChatMessage$outboundSchema),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionRequestJsonModality$outboundSchema),
  ).optional(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  parallelToolCalls: z.nullable(z.boolean()).optional(),
  prediction: z.nullable(
    z.lazy(() => ChatCompletionRequestJsonPrediction$outboundSchema),
  ).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  promptCacheKey: z.nullable(z.string()).optional(),
  reasoningEffort: z.nullable(
    ChatCompletionRequestJsonReasoningEffort$outboundSchema,
  ).optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        ChatCompletionRequestJSONResponseFormatJSONSchema$outboundSchema
      ),
      z.lazy(() => ChatCompletionRequestJsonResponseFormatText$outboundSchema),
      z.lazy(() =>
        ChatCompletionRequestJSONResponseFormatJSONObject$outboundSchema
      ),
    ]),
  ).optional(),
  seed: z.nullable(z.number().int()).optional(),
  serviceTier: z.nullable(ChatCompletionRequestJsonServiceTier$outboundSchema)
    .optional(),
  stop: z.nullable(z.array(z.string())).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream: z.boolean().default(false),
  streamOptions: z.nullable(
    z.lazy(() => ChatCompletionRequestJsonStreamOptions$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number()).optional(),
  toolChoice: z.nullable(
    z.union([
      z.lazy(() => ChatCompletionRequestJsonToolChoiceFunction$outboundSchema),
      ChatCompletionRequestJsonToolChoiceEnum$outboundSchema,
    ]),
  ).optional(),
  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),
  topLogprobs: z.nullable(z.number().int()).optional(),
  topP: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    maxCompletionTokens: "max_completion_tokens",
    parallelToolCalls: "parallel_tool_calls",
    presencePenalty: "presence_penalty",
    promptCacheKey: "prompt_cache_key",
    reasoningEffort: "reasoning_effort",
    responseFormat: "response_format",
    serviceTier: "service_tier",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topLogprobs: "top_logprobs",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestJson$ {
  /** @deprecated use `ChatCompletionRequestJson$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestJson$inboundSchema;
  /** @deprecated use `ChatCompletionRequestJson$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestJson$outboundSchema;
  /** @deprecated use `ChatCompletionRequestJson$Outbound` instead. */
  export type Outbound = ChatCompletionRequestJson$Outbound;
}

export function chatCompletionRequestJsonToJSON(
  chatCompletionRequestJson: ChatCompletionRequestJson,
): string {
  return JSON.stringify(
    ChatCompletionRequestJson$outboundSchema.parse(chatCompletionRequestJson),
  );
}

export function chatCompletionRequestJsonFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionRequestJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestJson' from JSON`,
  );
}
