/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
 */
export type UpdateChatCompletionRequestBody = {
  /**
   * The metadata key-value pairs to attach to the completion.
   */
  metadata: { [k: string]: string };
};

export type UpdateChatCompletionRequest = {
  /**
   * ID of the chat completion
   */
  completionId: string;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
   */
  requestBody: UpdateChatCompletionRequestBody;
};

/** @internal */
export const UpdateChatCompletionRequestBody$inboundSchema: z.ZodType<
  UpdateChatCompletionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.string()),
});

/** @internal */
export type UpdateChatCompletionRequestBody$Outbound = {
  metadata: { [k: string]: string };
};

/** @internal */
export const UpdateChatCompletionRequestBody$outboundSchema: z.ZodType<
  UpdateChatCompletionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateChatCompletionRequestBody
> = z.object({
  metadata: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChatCompletionRequestBody$ {
  /** @deprecated use `UpdateChatCompletionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateChatCompletionRequestBody$inboundSchema;
  /** @deprecated use `UpdateChatCompletionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateChatCompletionRequestBody$outboundSchema;
  /** @deprecated use `UpdateChatCompletionRequestBody$Outbound` instead. */
  export type Outbound = UpdateChatCompletionRequestBody$Outbound;
}

export function updateChatCompletionRequestBodyToJSON(
  updateChatCompletionRequestBody: UpdateChatCompletionRequestBody,
): string {
  return JSON.stringify(
    UpdateChatCompletionRequestBody$outboundSchema.parse(
      updateChatCompletionRequestBody,
    ),
  );
}

export function updateChatCompletionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChatCompletionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChatCompletionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChatCompletionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateChatCompletionRequest$inboundSchema: z.ZodType<
  UpdateChatCompletionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_id: z.string(),
  RequestBody: z.lazy(() => UpdateChatCompletionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "completion_id": "completionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateChatCompletionRequest$Outbound = {
  completion_id: string;
  RequestBody: UpdateChatCompletionRequestBody$Outbound;
};

/** @internal */
export const UpdateChatCompletionRequest$outboundSchema: z.ZodType<
  UpdateChatCompletionRequest$Outbound,
  z.ZodTypeDef,
  UpdateChatCompletionRequest
> = z.object({
  completionId: z.string(),
  requestBody: z.lazy(() => UpdateChatCompletionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    completionId: "completion_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChatCompletionRequest$ {
  /** @deprecated use `UpdateChatCompletionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateChatCompletionRequest$inboundSchema;
  /** @deprecated use `UpdateChatCompletionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateChatCompletionRequest$outboundSchema;
  /** @deprecated use `UpdateChatCompletionRequest$Outbound` instead. */
  export type Outbound = UpdateChatCompletionRequest$Outbound;
}

export function updateChatCompletionRequestToJSON(
  updateChatCompletionRequest: UpdateChatCompletionRequest,
): string {
  return JSON.stringify(
    UpdateChatCompletionRequest$outboundSchema.parse(
      updateChatCompletionRequest,
    ),
  );
}

export function updateChatCompletionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChatCompletionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChatCompletionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChatCompletionRequest' from JSON`,
  );
}
