/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteChatCompletionRequest = {
  /**
   * ID of the chat completion
   */
  completionId: string;
};

/** @internal */
export const DeleteChatCompletionRequest$inboundSchema: z.ZodType<
  DeleteChatCompletionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "completion_id": "completionId",
  });
});

/** @internal */
export type DeleteChatCompletionRequest$Outbound = {
  completion_id: string;
};

/** @internal */
export const DeleteChatCompletionRequest$outboundSchema: z.ZodType<
  DeleteChatCompletionRequest$Outbound,
  z.ZodTypeDef,
  DeleteChatCompletionRequest
> = z.object({
  completionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    completionId: "completion_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChatCompletionRequest$ {
  /** @deprecated use `DeleteChatCompletionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteChatCompletionRequest$inboundSchema;
  /** @deprecated use `DeleteChatCompletionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteChatCompletionRequest$outboundSchema;
  /** @deprecated use `DeleteChatCompletionRequest$Outbound` instead. */
  export type Outbound = DeleteChatCompletionRequest$Outbound;
}

export function deleteChatCompletionRequestToJSON(
  deleteChatCompletionRequest: DeleteChatCompletionRequest,
): string {
  return JSON.stringify(
    DeleteChatCompletionRequest$outboundSchema.parse(
      deleteChatCompletionRequest,
    ),
  );
}

export function deleteChatCompletionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChatCompletionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChatCompletionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChatCompletionRequest' from JSON`,
  );
}
