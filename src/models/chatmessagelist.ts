/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReturnedChatMessages,
  ReturnedChatMessages$inboundSchema,
  ReturnedChatMessages$Outbound,
  ReturnedChatMessages$outboundSchema,
} from "./returnedchatmessages.js";

export type ChatMessageList = {
  data: Array<ReturnedChatMessages>;
  firstId: string;
  hasMore: boolean;
  lastId: string;
  object: string;
};

/** @internal */
export const ChatMessageList$inboundSchema: z.ZodType<
  ChatMessageList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(ReturnedChatMessages$inboundSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_id": "firstId",
    "has_more": "hasMore",
    "last_id": "lastId",
  });
});

/** @internal */
export type ChatMessageList$Outbound = {
  data: Array<ReturnedChatMessages$Outbound>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

/** @internal */
export const ChatMessageList$outboundSchema: z.ZodType<
  ChatMessageList$Outbound,
  z.ZodTypeDef,
  ChatMessageList
> = z.object({
  data: z.array(ReturnedChatMessages$outboundSchema),
  firstId: z.string(),
  hasMore: z.boolean(),
  lastId: z.string(),
  object: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstId: "first_id",
    hasMore: "has_more",
    lastId: "last_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageList$ {
  /** @deprecated use `ChatMessageList$inboundSchema` instead. */
  export const inboundSchema = ChatMessageList$inboundSchema;
  /** @deprecated use `ChatMessageList$outboundSchema` instead. */
  export const outboundSchema = ChatMessageList$outboundSchema;
  /** @deprecated use `ChatMessageList$Outbound` instead. */
  export type Outbound = ChatMessageList$Outbound;
}

export function chatMessageListToJSON(
  chatMessageList: ChatMessageList,
): string {
  return JSON.stringify(ChatMessageList$outboundSchema.parse(chatMessageList));
}

export function chatMessageListFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageList' from JSON`,
  );
}
