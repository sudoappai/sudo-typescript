/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionDelta,
  ChatCompletionDelta$inboundSchema,
  ChatCompletionDelta$Outbound,
  ChatCompletionDelta$outboundSchema,
} from "./chatcompletiondelta.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The reason the model stopped generating tokens. This will be 'stop' if the model hit a natural stop point or a provided stop sequence, 'length' if the maximum number of tokens specified in the request was reached, 'tool_calls' if the model called a tool, or 'content_filter' if content was omitted due to a flag from our content filters.
 */
export const FinishReason = {
  Stop: "stop",
  Length: "length",
  ToolCalls: "tool_calls",
  ContentFilter: "content_filter",
} as const;
/**
 * The reason the model stopped generating tokens. This will be 'stop' if the model hit a natural stop point or a provided stop sequence, 'length' if the maximum number of tokens specified in the request was reached, 'tool_calls' if the model called a tool, or 'content_filter' if content was omitted due to a flag from our content filters.
 */
export type FinishReason = ClosedEnum<typeof FinishReason>;

/**
 * Log probability information for the choice.
 */
export type Logprobs = {};

export type ChatCompletionChunkChoice = {
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  delta: ChatCompletionDelta;
  /**
   * The reason the model stopped generating tokens. This will be 'stop' if the model hit a natural stop point or a provided stop sequence, 'length' if the maximum number of tokens specified in the request was reached, 'tool_calls' if the model called a tool, or 'content_filter' if content was omitted due to a flag from our content filters.
   */
  finishReason?: FinishReason | null | undefined;
  /**
   * Log probability information for the choice.
   */
  logprobs?: Logprobs | null | undefined;
};

/** @internal */
export const FinishReason$inboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  z.nativeEnum(FinishReason);

/** @internal */
export const FinishReason$outboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  FinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinishReason$ {
  /** @deprecated use `FinishReason$inboundSchema` instead. */
  export const inboundSchema = FinishReason$inboundSchema;
  /** @deprecated use `FinishReason$outboundSchema` instead. */
  export const outboundSchema = FinishReason$outboundSchema;
}

/** @internal */
export const Logprobs$inboundSchema: z.ZodType<
  Logprobs,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Logprobs$Outbound = {};

/** @internal */
export const Logprobs$outboundSchema: z.ZodType<
  Logprobs$Outbound,
  z.ZodTypeDef,
  Logprobs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logprobs$ {
  /** @deprecated use `Logprobs$inboundSchema` instead. */
  export const inboundSchema = Logprobs$inboundSchema;
  /** @deprecated use `Logprobs$outboundSchema` instead. */
  export const outboundSchema = Logprobs$outboundSchema;
  /** @deprecated use `Logprobs$Outbound` instead. */
  export type Outbound = Logprobs$Outbound;
}

export function logprobsToJSON(logprobs: Logprobs): string {
  return JSON.stringify(Logprobs$outboundSchema.parse(logprobs));
}

export function logprobsFromJSON(
  jsonString: string,
): SafeParseResult<Logprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Logprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Logprobs' from JSON`,
  );
}

/** @internal */
export const ChatCompletionChunkChoice$inboundSchema: z.ZodType<
  ChatCompletionChunkChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int(),
  delta: ChatCompletionDelta$inboundSchema,
  finish_reason: z.nullable(FinishReason$inboundSchema).optional(),
  logprobs: z.nullable(z.lazy(() => Logprobs$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ChatCompletionChunkChoice$Outbound = {
  index: number;
  delta: ChatCompletionDelta$Outbound;
  finish_reason?: string | null | undefined;
  logprobs?: Logprobs$Outbound | null | undefined;
};

/** @internal */
export const ChatCompletionChunkChoice$outboundSchema: z.ZodType<
  ChatCompletionChunkChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunkChoice
> = z.object({
  index: z.number().int(),
  delta: ChatCompletionDelta$outboundSchema,
  finishReason: z.nullable(FinishReason$outboundSchema).optional(),
  logprobs: z.nullable(z.lazy(() => Logprobs$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkChoice$ {
  /** @deprecated use `ChatCompletionChunkChoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkChoice$inboundSchema;
  /** @deprecated use `ChatCompletionChunkChoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkChoice$outboundSchema;
  /** @deprecated use `ChatCompletionChunkChoice$Outbound` instead. */
  export type Outbound = ChatCompletionChunkChoice$Outbound;
}

export function chatCompletionChunkChoiceToJSON(
  chatCompletionChunkChoice: ChatCompletionChunkChoice,
): string {
  return JSON.stringify(
    ChatCompletionChunkChoice$outboundSchema.parse(chatCompletionChunkChoice),
  );
}

export function chatCompletionChunkChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunkChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunkChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunkChoice' from JSON`,
  );
}
