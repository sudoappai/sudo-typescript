/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolCallFunction,
  ToolCallFunction$inboundSchema,
  ToolCallFunction$Outbound,
  ToolCallFunction$outboundSchema,
} from "./toolcallfunction.js";

export type ToolCall = {
  function: ToolCallFunction;
  id: string;
  type: string;
};

/** @internal */
export const ToolCall$inboundSchema: z.ZodType<
  ToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  function: ToolCallFunction$inboundSchema,
  id: z.string(),
  type: z.string(),
});

/** @internal */
export type ToolCall$Outbound = {
  function: ToolCallFunction$Outbound;
  id: string;
  type: string;
};

/** @internal */
export const ToolCall$outboundSchema: z.ZodType<
  ToolCall$Outbound,
  z.ZodTypeDef,
  ToolCall
> = z.object({
  function: ToolCallFunction$outboundSchema,
  id: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCall$ {
  /** @deprecated use `ToolCall$inboundSchema` instead. */
  export const inboundSchema = ToolCall$inboundSchema;
  /** @deprecated use `ToolCall$outboundSchema` instead. */
  export const outboundSchema = ToolCall$outboundSchema;
  /** @deprecated use `ToolCall$Outbound` instead. */
  export type Outbound = ToolCall$Outbound;
}

export function toolCallToJSON(toolCall: ToolCall): string {
  return JSON.stringify(ToolCall$outboundSchema.parse(toolCall));
}

export function toolCallFromJSON(
  jsonString: string,
): SafeParseResult<ToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCall' from JSON`,
  );
}
