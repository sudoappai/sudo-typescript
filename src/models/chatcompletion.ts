/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Choice,
  Choice$inboundSchema,
  Choice$Outbound,
  Choice$outboundSchema,
} from "./choice.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Usage,
  Usage$inboundSchema,
  Usage$Outbound,
  Usage$outboundSchema,
} from "./usage.js";

export type ChatCompletion = {
  choices: Array<Choice>;
  created: number;
  id: string;
  model: string;
  object: string;
  serviceTier?: string | null | undefined;
  systemFingerprint?: string | null | undefined;
  usage: Usage;
  /**
   * Developer-defined metadata attached to the completion.
   */
  metadata?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const ChatCompletion$inboundSchema: z.ZodType<
  ChatCompletion,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(Choice$inboundSchema),
  created: z.number().int(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  service_tier: z.nullable(z.string()).optional(),
  system_fingerprint: z.nullable(z.string()).optional(),
  usage: Usage$inboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ChatCompletion$Outbound = {
  choices: Array<Choice$Outbound>;
  created: number;
  id: string;
  model: string;
  object: string;
  service_tier?: string | null | undefined;
  system_fingerprint?: string | null | undefined;
  usage: Usage$Outbound;
  metadata?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const ChatCompletion$outboundSchema: z.ZodType<
  ChatCompletion$Outbound,
  z.ZodTypeDef,
  ChatCompletion
> = z.object({
  choices: z.array(Choice$outboundSchema),
  created: z.number().int(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  serviceTier: z.nullable(z.string()).optional(),
  systemFingerprint: z.nullable(z.string()).optional(),
  usage: Usage$outboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletion$ {
  /** @deprecated use `ChatCompletion$inboundSchema` instead. */
  export const inboundSchema = ChatCompletion$inboundSchema;
  /** @deprecated use `ChatCompletion$outboundSchema` instead. */
  export const outboundSchema = ChatCompletion$outboundSchema;
  /** @deprecated use `ChatCompletion$Outbound` instead. */
  export type Outbound = ChatCompletion$Outbound;
}

export function chatCompletionToJSON(chatCompletion: ChatCompletion): string {
  return JSON.stringify(ChatCompletion$outboundSchema.parse(chatCompletion));
}

export function chatCompletionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletion' from JSON`,
  );
}
