/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionChunkChoice,
  ChatCompletionChunkChoice$inboundSchema,
  ChatCompletionChunkChoice$Outbound,
  ChatCompletionChunkChoice$outboundSchema,
} from "./chatcompletionchunkchoice.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Usage,
  Usage$inboundSchema,
  Usage$Outbound,
  Usage$outboundSchema,
} from "./usage.js";

/**
 * The object type, which is always 'chat.completion.chunk'.
 */
export const ObjectT = {
  ChatCompletionChunk: "chat.completion.chunk",
} as const;
/**
 * The object type, which is always 'chat.completion.chunk'.
 */
export type ObjectT = ClosedEnum<typeof ObjectT>;

export type Data = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * The object type, which is always 'chat.completion.chunk'.
   */
  object: ObjectT;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint?: string | null | undefined;
  /**
   * A list of chat completion choices.
   */
  choices: Array<ChatCompletionChunkChoice>;
  usage?: Usage | null | undefined;
};

export type ChatCompletionChunk = {
  data?: Data | undefined;
};

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    object: ObjectT$inboundSchema,
    created: z.number().int(),
    model: z.string(),
    system_fingerprint: z.nullable(z.string()).optional(),
    choices: z.array(ChatCompletionChunkChoice$inboundSchema),
    usage: z.nullable(Usage$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "system_fingerprint": "systemFingerprint",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  object: string;
  created: number;
  model: string;
  system_fingerprint?: string | null | undefined;
  choices: Array<ChatCompletionChunkChoice$Outbound>;
  usage?: Usage$Outbound | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    object: ObjectT$outboundSchema,
    created: z.number().int(),
    model: z.string(),
    systemFingerprint: z.nullable(z.string()).optional(),
    choices: z.array(ChatCompletionChunkChoice$outboundSchema),
    usage: z.nullable(Usage$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      systemFingerprint: "system_fingerprint",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ChatCompletionChunk$inboundSchema: z.ZodType<
  ChatCompletionChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => Data$inboundSchema).optional()),
});

/** @internal */
export type ChatCompletionChunk$Outbound = {
  data?: Data$Outbound | undefined;
};

/** @internal */
export const ChatCompletionChunk$outboundSchema: z.ZodType<
  ChatCompletionChunk$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunk
> = z.object({
  data: z.lazy(() => Data$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunk$ {
  /** @deprecated use `ChatCompletionChunk$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunk$inboundSchema;
  /** @deprecated use `ChatCompletionChunk$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunk$outboundSchema;
  /** @deprecated use `ChatCompletionChunk$Outbound` instead. */
  export type Outbound = ChatCompletionChunk$Outbound;
}

export function chatCompletionChunkToJSON(
  chatCompletionChunk: ChatCompletionChunk,
): string {
  return JSON.stringify(
    ChatCompletionChunk$outboundSchema.parse(chatCompletionChunk),
  );
}

export function chatCompletionChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunk' from JSON`,
  );
}
