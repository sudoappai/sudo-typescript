/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";

/**
 * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
 */
export const ChatCompletionRequestStreamFormat = {
  Wav: "wav",
  Mp3: "mp3",
  Flac: "flac",
  Opus: "opus",
  Pcm16: "pcm16",
} as const;
/**
 * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
 */
export type ChatCompletionRequestStreamFormat = ClosedEnum<
  typeof ChatCompletionRequestStreamFormat
>;

/**
 * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
 */
export const ChatCompletionRequestStreamVoice = {
  Alloy: "alloy",
  Echo: "echo",
  Fable: "fable",
  Onyx: "onyx",
  Nova: "nova",
  Shimmer: "shimmer",
} as const;
/**
 * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
 */
export type ChatCompletionRequestStreamVoice = ClosedEnum<
  typeof ChatCompletionRequestStreamVoice
>;

/**
 * Parameters for audio output. Required when audio output is requested with modalities: ["audio"].
 */
export type ChatCompletionRequestStreamAudio = {
  /**
   * Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
   */
  format?: ChatCompletionRequestStreamFormat | undefined;
  /**
   * Specifies the voice type. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
   */
  voice?: ChatCompletionRequestStreamVoice | undefined;
};

export const ChatCompletionRequestStreamModality = {
  Text: "text",
  Audio: "audio",
} as const;
export type ChatCompletionRequestStreamModality = ClosedEnum<
  typeof ChatCompletionRequestStreamModality
>;

export const ChatCompletionRequestStreamTypeContent = {
  Content: "content",
} as const;
export type ChatCompletionRequestStreamTypeContent = ClosedEnum<
  typeof ChatCompletionRequestStreamTypeContent
>;

/**
 * Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.
 */
export type ChatCompletionRequestStreamPrediction = {
  type?: ChatCompletionRequestStreamTypeContent | undefined;
  /**
   * The predicted content for the completion.
   */
  content?: string | undefined;
};

/**
 * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const ChatCompletionRequestStreamReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type ChatCompletionRequestStreamReasoningEffort = ClosedEnum<
  typeof ChatCompletionRequestStreamReasoningEffort
>;

export const ChatCompletionRequestStreamTypeJSONSchema = {
  JsonSchema: "json_schema",
} as const;
export type ChatCompletionRequestStreamTypeJSONSchema = ClosedEnum<
  typeof ChatCompletionRequestStreamTypeJSONSchema
>;

/**
 * The JSON schema definition for structured outputs.
 */
export type ChatCompletionRequestStreamJsonSchema = {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for, used by the model to determine how to respond in the format.
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object.
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict schema adherence when generating the output.
   */
  strict?: boolean | undefined;
};

export type ChatCompletionRequestStreamResponseFormatJSONSchema = {
  type: ChatCompletionRequestStreamTypeJSONSchema;
  /**
   * The JSON schema definition for structured outputs.
   */
  jsonSchema: ChatCompletionRequestStreamJsonSchema;
};

export const ChatCompletionRequestStreamTypeJSONObject = {
  JsonObject: "json_object",
} as const;
export type ChatCompletionRequestStreamTypeJSONObject = ClosedEnum<
  typeof ChatCompletionRequestStreamTypeJSONObject
>;

export type ChatCompletionRequestStreamResponseFormatJSONObject = {
  type: ChatCompletionRequestStreamTypeJSONObject;
};

export const ChatCompletionRequestStreamTypeText = {
  Text: "text",
} as const;
export type ChatCompletionRequestStreamTypeText = ClosedEnum<
  typeof ChatCompletionRequestStreamTypeText
>;

export type ChatCompletionRequestStreamResponseFormatText = {
  type: ChatCompletionRequestStreamTypeText;
};

/**
 * An object specifying the format that the model must output. Compatible with GPT-4o, GPT-4o mini, GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106. Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which guarantee the model will match your supplied JSON schema. Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
 */
export type ChatCompletionRequestStreamResponseFormatUnion =
  | ChatCompletionRequestStreamResponseFormatJSONSchema
  | ChatCompletionRequestStreamResponseFormatText
  | ChatCompletionRequestStreamResponseFormatJSONObject;

/**
 * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
 */
export const ChatCompletionRequestStreamServiceTier = {
  Auto: "auto",
  Default: "default",
} as const;
/**
 * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
 */
export type ChatCompletionRequestStreamServiceTier = ClosedEnum<
  typeof ChatCompletionRequestStreamServiceTier
>;

/**
 * Options for streaming response. Only set this when you set stream: true.
 */
export type ChatCompletionRequestStreamStreamOptions = {
  /**
   * If set, an additional chunk will be streamed before the data: [DONE] message. The usage field on this chunk shows the token usage statistics for the entire request, and the choices field will always be an empty array. All other chunks will also include a usage field, but with a null value.
   */
  includeUsage?: boolean | undefined;
};

export const ChatCompletionRequestStreamToolChoiceType = {
  Function: "function",
} as const;
export type ChatCompletionRequestStreamToolChoiceType = ClosedEnum<
  typeof ChatCompletionRequestStreamToolChoiceType
>;

export type ChatCompletionRequestStreamFunction = {
  name: string;
};

export type ChatCompletionRequestStreamToolChoiceFunction = {
  type: ChatCompletionRequestStreamToolChoiceType;
  function: ChatCompletionRequestStreamFunction;
};

export const ChatCompletionRequestStreamToolChoiceEnum = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
export type ChatCompletionRequestStreamToolChoiceEnum = ClosedEnum<
  typeof ChatCompletionRequestStreamToolChoiceEnum
>;

/**
 * Controls which (if any) tool is called by the model. none means the model won't call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool. none is the default when no tools are present. auto is the default if tools are present.
 */
export type ChatCompletionRequestStreamToolChoiceUnion =
  | ChatCompletionRequestStreamToolChoiceFunction
  | ChatCompletionRequestStreamToolChoiceEnum;

export type ChatCompletionRequestStream = {
  /**
   * Parameters for audio output. Required when audio output is requested with modalities: ["audio"].
   */
  audio?: ChatCompletionRequestStreamAudio | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
   */
  logitBias?: { [k: string]: number } | null | undefined;
  /**
   * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
   */
  logprobs?: boolean | null | undefined;
  /**
   * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio.
   */
  messages: Array<ChatMessage>;
  /**
   * Developer-defined tags and values used for filtering completions in the stored completions dashboard.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default: ["text"]. The gpt-4o-audio-preview model can also be used to generate audio. To request that this model generate both text and audio responses, you can use: ["text", "audio"].
   */
  modalities?: Array<ChatCompletionRequestStreamModality> | null | undefined;
  /**
   * Model name used to generate the response, like gpt-4o or deepseek-reasoner. Sudo offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [docs](https://docs.sudoapp.dev/overview/models) to browse and compare available models.
   */
  model: string;
  /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
   */
  n?: number | null | undefined;
  /**
   * Whether to enable parallel function calling during tool use.
   */
  parallelToolCalls?: boolean | null | undefined;
  /**
   * Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.
   */
  prediction?: ChatCompletionRequestStreamPrediction | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * A unique identifier for caching prompts to improve response times for repeated requests.
   */
  promptCacheKey?: string | null | undefined;
  /**
   * o1 models only. Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?:
    | ChatCompletionRequestStreamReasoningEffort
    | null
    | undefined;
  /**
   * An object specifying the format that the model must output. Compatible with GPT-4o, GPT-4o mini, GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106. Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which guarantee the model will match your supplied JSON schema. Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
   */
  responseFormat?:
    | ChatCompletionRequestStreamResponseFormatJSONSchema
    | ChatCompletionRequestStreamResponseFormatText
    | ChatCompletionRequestStreamResponseFormatJSONObject
    | null
    | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism isn't guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
   */
  seed?: number | null | undefined;
  /**
   * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service.
   */
  serviceTier?: ChatCompletionRequestStreamServiceTier | null | undefined;
  /**
   * Not supported with latest reasoning models o3 and o4-mini. Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
   */
  stop?: Array<string> | null | undefined;
  /**
   * Whether or not to store the output of this chat completion request for use in our model distillation or evaluation products.
   */
  store?: boolean | null | undefined;
  /**
   * If set, partial message deltas will be sent as server-sent events. For streaming responses, this must be true.
   */
  stream?: boolean | undefined;
  /**
   * Options for streaming response. Only set this when you set stream: true.
   */
  streamOptions?: ChatCompletionRequestStreamStreamOptions | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
   */
  temperature?: number | null | undefined;
  /**
   * Controls which (if any) tool is called by the model. none means the model won't call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool. none is the default when no tools are present. auto is the default if tools are present.
   */
  toolChoice?:
    | ChatCompletionRequestStreamToolChoiceFunction
    | ChatCompletionRequestStreamToolChoiceEnum
    | null
    | undefined;
  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
   */
  tools?: Array<Tool> | null | undefined;
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
   */
  topLogprobs?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
   */
  topP?: number | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help to monitor and detect abuse.
   */
  user?: string | null | undefined;
};

/** @internal */
export const ChatCompletionRequestStreamFormat$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamFormat
> = z.nativeEnum(ChatCompletionRequestStreamFormat);

/** @internal */
export const ChatCompletionRequestStreamFormat$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamFormat
> = ChatCompletionRequestStreamFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamFormat$ {
  /** @deprecated use `ChatCompletionRequestStreamFormat$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestStreamFormat$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamFormat$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamFormat$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamVoice$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamVoice
> = z.nativeEnum(ChatCompletionRequestStreamVoice);

/** @internal */
export const ChatCompletionRequestStreamVoice$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamVoice
> = ChatCompletionRequestStreamVoice$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamVoice$ {
  /** @deprecated use `ChatCompletionRequestStreamVoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestStreamVoice$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamVoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestStreamVoice$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamAudio$inboundSchema: z.ZodType<
  ChatCompletionRequestStreamAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: ChatCompletionRequestStreamFormat$inboundSchema.optional(),
  voice: ChatCompletionRequestStreamVoice$inboundSchema.optional(),
});

/** @internal */
export type ChatCompletionRequestStreamAudio$Outbound = {
  format?: string | undefined;
  voice?: string | undefined;
};

/** @internal */
export const ChatCompletionRequestStreamAudio$outboundSchema: z.ZodType<
  ChatCompletionRequestStreamAudio$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStreamAudio
> = z.object({
  format: ChatCompletionRequestStreamFormat$outboundSchema.optional(),
  voice: ChatCompletionRequestStreamVoice$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamAudio$ {
  /** @deprecated use `ChatCompletionRequestStreamAudio$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestStreamAudio$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamAudio$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestStreamAudio$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamAudio$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamAudio$Outbound;
}

export function chatCompletionRequestStreamAudioToJSON(
  chatCompletionRequestStreamAudio: ChatCompletionRequestStreamAudio,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamAudio$outboundSchema.parse(
      chatCompletionRequestStreamAudio,
    ),
  );
}

export function chatCompletionRequestStreamAudioFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestStreamAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionRequestStreamAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestStreamAudio' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamModality$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamModality
> = z.nativeEnum(ChatCompletionRequestStreamModality);

/** @internal */
export const ChatCompletionRequestStreamModality$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamModality> =
    ChatCompletionRequestStreamModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamModality$ {
  /** @deprecated use `ChatCompletionRequestStreamModality$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamModality$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamModality$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamModality$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamTypeContent$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeContent> = z.nativeEnum(
    ChatCompletionRequestStreamTypeContent,
  );

/** @internal */
export const ChatCompletionRequestStreamTypeContent$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeContent> =
    ChatCompletionRequestStreamTypeContent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamTypeContent$ {
  /** @deprecated use `ChatCompletionRequestStreamTypeContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamTypeContent$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamTypeContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamTypeContent$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamPrediction$inboundSchema: z.ZodType<
  ChatCompletionRequestStreamPrediction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChatCompletionRequestStreamTypeContent$inboundSchema.optional(),
  content: z.string().optional(),
});

/** @internal */
export type ChatCompletionRequestStreamPrediction$Outbound = {
  type?: string | undefined;
  content?: string | undefined;
};

/** @internal */
export const ChatCompletionRequestStreamPrediction$outboundSchema: z.ZodType<
  ChatCompletionRequestStreamPrediction$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStreamPrediction
> = z.object({
  type: ChatCompletionRequestStreamTypeContent$outboundSchema.optional(),
  content: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamPrediction$ {
  /** @deprecated use `ChatCompletionRequestStreamPrediction$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamPrediction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamPrediction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamPrediction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamPrediction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamPrediction$Outbound;
}

export function chatCompletionRequestStreamPredictionToJSON(
  chatCompletionRequestStreamPrediction: ChatCompletionRequestStreamPrediction,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamPrediction$outboundSchema.parse(
      chatCompletionRequestStreamPrediction,
    ),
  );
}

export function chatCompletionRequestStreamPredictionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestStreamPrediction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamPrediction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestStreamPrediction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamReasoningEffort> = z
    .nativeEnum(ChatCompletionRequestStreamReasoningEffort);

/** @internal */
export const ChatCompletionRequestStreamReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamReasoningEffort> =
    ChatCompletionRequestStreamReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamReasoningEffort$ {
  /** @deprecated use `ChatCompletionRequestStreamReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamReasoningEffort$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamTypeJSONSchema$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeJSONSchema> = z
    .nativeEnum(ChatCompletionRequestStreamTypeJSONSchema);

/** @internal */
export const ChatCompletionRequestStreamTypeJSONSchema$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeJSONSchema> =
    ChatCompletionRequestStreamTypeJSONSchema$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamTypeJSONSchema$ {
  /** @deprecated use `ChatCompletionRequestStreamTypeJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamTypeJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamTypeJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamTypeJSONSchema$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamJsonSchema$inboundSchema: z.ZodType<
  ChatCompletionRequestStreamJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.boolean().optional(),
});

/** @internal */
export type ChatCompletionRequestStreamJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict?: boolean | undefined;
};

/** @internal */
export const ChatCompletionRequestStreamJsonSchema$outboundSchema: z.ZodType<
  ChatCompletionRequestStreamJsonSchema$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStreamJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamJsonSchema$ {
  /** @deprecated use `ChatCompletionRequestStreamJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamJsonSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamJsonSchema$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamJsonSchema$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamJsonSchema$Outbound;
}

export function chatCompletionRequestStreamJsonSchemaToJSON(
  chatCompletionRequestStreamJsonSchema: ChatCompletionRequestStreamJsonSchema,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamJsonSchema$outboundSchema.parse(
      chatCompletionRequestStreamJsonSchema,
    ),
  );
}

export function chatCompletionRequestStreamJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestStreamJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestStreamJsonSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestStreamTypeJSONSchema$inboundSchema,
    json_schema: z.lazy(() =>
      ChatCompletionRequestStreamJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound = {
  type: string;
  json_schema: ChatCompletionRequestStreamJsonSchema$Outbound;
};

/** @internal */
export const ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamResponseFormatJSONSchema
  > = z.object({
    type: ChatCompletionRequestStreamTypeJSONSchema$outboundSchema,
    jsonSchema: z.lazy(() =>
      ChatCompletionRequestStreamJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamResponseFormatJSONSchema$ {
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound =
    ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound;
}

export function chatCompletionRequestStreamResponseFormatJSONSchemaToJSON(
  chatCompletionRequestStreamResponseFormatJSONSchema:
    ChatCompletionRequestStreamResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema.parse(
      chatCompletionRequestStreamResponseFormatJSONSchema,
    ),
  );
}

export function chatCompletionRequestStreamResponseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamResponseFormatJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamResponseFormatJSONSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamTypeJSONObject$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeJSONObject> = z
    .nativeEnum(ChatCompletionRequestStreamTypeJSONObject);

/** @internal */
export const ChatCompletionRequestStreamTypeJSONObject$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeJSONObject> =
    ChatCompletionRequestStreamTypeJSONObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamTypeJSONObject$ {
  /** @deprecated use `ChatCompletionRequestStreamTypeJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamTypeJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamTypeJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamTypeJSONObject$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestStreamTypeJSONObject$inboundSchema,
  });

/** @internal */
export type ChatCompletionRequestStreamResponseFormatJSONObject$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamResponseFormatJSONObject
  > = z.object({
    type: ChatCompletionRequestStreamTypeJSONObject$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamResponseFormatJSONObject$ {
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatJSONObject$Outbound` instead. */
  export type Outbound =
    ChatCompletionRequestStreamResponseFormatJSONObject$Outbound;
}

export function chatCompletionRequestStreamResponseFormatJSONObjectToJSON(
  chatCompletionRequestStreamResponseFormatJSONObject:
    ChatCompletionRequestStreamResponseFormatJSONObject,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema.parse(
      chatCompletionRequestStreamResponseFormatJSONObject,
    ),
  );
}

export function chatCompletionRequestStreamResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamTypeText$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionRequestStreamTypeText
> = z.nativeEnum(ChatCompletionRequestStreamTypeText);

/** @internal */
export const ChatCompletionRequestStreamTypeText$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamTypeText> =
    ChatCompletionRequestStreamTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamTypeText$ {
  /** @deprecated use `ChatCompletionRequestStreamTypeText$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamTypeText$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamTypeText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamTypeText$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamResponseFormatText$inboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestStreamTypeText$inboundSchema,
  });

/** @internal */
export type ChatCompletionRequestStreamResponseFormatText$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionRequestStreamResponseFormatText$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatText$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamResponseFormatText
  > = z.object({
    type: ChatCompletionRequestStreamTypeText$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamResponseFormatText$ {
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamResponseFormatText$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamResponseFormatText$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatText$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamResponseFormatText$Outbound;
}

export function chatCompletionRequestStreamResponseFormatTextToJSON(
  chatCompletionRequestStreamResponseFormatText:
    ChatCompletionRequestStreamResponseFormatText,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamResponseFormatText$outboundSchema.parse(
      chatCompletionRequestStreamResponseFormatText,
    ),
  );
}

export function chatCompletionRequestStreamResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamResponseFormatText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamResponseFormatText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamResponseFormatText' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamResponseFormatUnion$inboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() => ChatCompletionRequestStreamResponseFormatText$inboundSchema),
    z.lazy(() =>
      ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema
    ),
  ]);

/** @internal */
export type ChatCompletionRequestStreamResponseFormatUnion$Outbound =
  | ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound
  | ChatCompletionRequestStreamResponseFormatText$Outbound
  | ChatCompletionRequestStreamResponseFormatJSONObject$Outbound;

/** @internal */
export const ChatCompletionRequestStreamResponseFormatUnion$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamResponseFormatUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamResponseFormatUnion
  > = z.union([
    z.lazy(() =>
      ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() => ChatCompletionRequestStreamResponseFormatText$outboundSchema),
    z.lazy(() =>
      ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamResponseFormatUnion$ {
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamResponseFormatUnion$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamResponseFormatUnion$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamResponseFormatUnion$Outbound` instead. */
  export type Outbound =
    ChatCompletionRequestStreamResponseFormatUnion$Outbound;
}

export function chatCompletionRequestStreamResponseFormatUnionToJSON(
  chatCompletionRequestStreamResponseFormatUnion:
    ChatCompletionRequestStreamResponseFormatUnion,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamResponseFormatUnion$outboundSchema.parse(
      chatCompletionRequestStreamResponseFormatUnion,
    ),
  );
}

export function chatCompletionRequestStreamResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamServiceTier$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamServiceTier> = z.nativeEnum(
    ChatCompletionRequestStreamServiceTier,
  );

/** @internal */
export const ChatCompletionRequestStreamServiceTier$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamServiceTier> =
    ChatCompletionRequestStreamServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamServiceTier$ {
  /** @deprecated use `ChatCompletionRequestStreamServiceTier$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamServiceTier$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamServiceTier$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamStreamOptions$inboundSchema: z.ZodType<
  ChatCompletionRequestStreamStreamOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type ChatCompletionRequestStreamStreamOptions$Outbound = {
  include_usage?: boolean | undefined;
};

/** @internal */
export const ChatCompletionRequestStreamStreamOptions$outboundSchema: z.ZodType<
  ChatCompletionRequestStreamStreamOptions$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStreamStreamOptions
> = z.object({
  includeUsage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamStreamOptions$ {
  /** @deprecated use `ChatCompletionRequestStreamStreamOptions$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamStreamOptions$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamStreamOptions$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamStreamOptions$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamStreamOptions$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamStreamOptions$Outbound;
}

export function chatCompletionRequestStreamStreamOptionsToJSON(
  chatCompletionRequestStreamStreamOptions:
    ChatCompletionRequestStreamStreamOptions,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamStreamOptions$outboundSchema.parse(
      chatCompletionRequestStreamStreamOptions,
    ),
  );
}

export function chatCompletionRequestStreamStreamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamStreamOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamStreamOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamStreamOptions' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamToolChoiceType$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamToolChoiceType> = z
    .nativeEnum(ChatCompletionRequestStreamToolChoiceType);

/** @internal */
export const ChatCompletionRequestStreamToolChoiceType$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamToolChoiceType> =
    ChatCompletionRequestStreamToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamToolChoiceType$ {
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceType$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamToolChoiceType$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceType$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamToolChoiceType$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamFunction$inboundSchema: z.ZodType<
  ChatCompletionRequestStreamFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ChatCompletionRequestStreamFunction$Outbound = {
  name: string;
};

/** @internal */
export const ChatCompletionRequestStreamFunction$outboundSchema: z.ZodType<
  ChatCompletionRequestStreamFunction$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStreamFunction
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamFunction$ {
  /** @deprecated use `ChatCompletionRequestStreamFunction$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamFunction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamFunction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamFunction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamFunction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamFunction$Outbound;
}

export function chatCompletionRequestStreamFunctionToJSON(
  chatCompletionRequestStreamFunction: ChatCompletionRequestStreamFunction,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamFunction$outboundSchema.parse(
      chatCompletionRequestStreamFunction,
    ),
  );
}

export function chatCompletionRequestStreamFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestStreamFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestStreamFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamToolChoiceFunction$inboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamToolChoiceFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionRequestStreamToolChoiceType$inboundSchema,
    function: z.lazy(() => ChatCompletionRequestStreamFunction$inboundSchema),
  });

/** @internal */
export type ChatCompletionRequestStreamToolChoiceFunction$Outbound = {
  type: string;
  function: ChatCompletionRequestStreamFunction$Outbound;
};

/** @internal */
export const ChatCompletionRequestStreamToolChoiceFunction$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamToolChoiceFunction$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamToolChoiceFunction
  > = z.object({
    type: ChatCompletionRequestStreamToolChoiceType$outboundSchema,
    function: z.lazy(() => ChatCompletionRequestStreamFunction$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamToolChoiceFunction$ {
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamToolChoiceFunction$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamToolChoiceFunction$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceFunction$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamToolChoiceFunction$Outbound;
}

export function chatCompletionRequestStreamToolChoiceFunctionToJSON(
  chatCompletionRequestStreamToolChoiceFunction:
    ChatCompletionRequestStreamToolChoiceFunction,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamToolChoiceFunction$outboundSchema.parse(
      chatCompletionRequestStreamToolChoiceFunction,
    ),
  );
}

export function chatCompletionRequestStreamToolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamToolChoiceFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamToolChoiceFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStreamToolChoiceEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamToolChoiceEnum> = z
    .nativeEnum(ChatCompletionRequestStreamToolChoiceEnum);

/** @internal */
export const ChatCompletionRequestStreamToolChoiceEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionRequestStreamToolChoiceEnum> =
    ChatCompletionRequestStreamToolChoiceEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamToolChoiceEnum$ {
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamToolChoiceEnum$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamToolChoiceEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestStreamToolChoiceUnion$inboundSchema:
  z.ZodType<ChatCompletionRequestStreamToolChoiceUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => ChatCompletionRequestStreamToolChoiceFunction$inboundSchema),
      ChatCompletionRequestStreamToolChoiceEnum$inboundSchema,
    ]);

/** @internal */
export type ChatCompletionRequestStreamToolChoiceUnion$Outbound =
  | ChatCompletionRequestStreamToolChoiceFunction$Outbound
  | string;

/** @internal */
export const ChatCompletionRequestStreamToolChoiceUnion$outboundSchema:
  z.ZodType<
    ChatCompletionRequestStreamToolChoiceUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionRequestStreamToolChoiceUnion
  > = z.union([
    z.lazy(() => ChatCompletionRequestStreamToolChoiceFunction$outboundSchema),
    ChatCompletionRequestStreamToolChoiceEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStreamToolChoiceUnion$ {
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionRequestStreamToolChoiceUnion$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestStreamToolChoiceUnion$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStreamToolChoiceUnion$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStreamToolChoiceUnion$Outbound;
}

export function chatCompletionRequestStreamToolChoiceUnionToJSON(
  chatCompletionRequestStreamToolChoiceUnion:
    ChatCompletionRequestStreamToolChoiceUnion,
): string {
  return JSON.stringify(
    ChatCompletionRequestStreamToolChoiceUnion$outboundSchema.parse(
      chatCompletionRequestStreamToolChoiceUnion,
    ),
  );
}

export function chatCompletionRequestStreamToolChoiceUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionRequestStreamToolChoiceUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestStreamToolChoiceUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionRequestStreamToolChoiceUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionRequestStream$inboundSchema: z.ZodType<
  ChatCompletionRequestStream,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamAudio$inboundSchema),
  ).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  max_completion_tokens: z.nullable(z.number().int()).optional(),
  messages: z.array(ChatMessage$inboundSchema),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionRequestStreamModality$inboundSchema),
  ).optional(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  parallel_tool_calls: z.nullable(z.boolean()).optional(),
  prediction: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamPrediction$inboundSchema),
  ).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  prompt_cache_key: z.nullable(z.string()).optional(),
  reasoning_effort: z.nullable(
    ChatCompletionRequestStreamReasoningEffort$inboundSchema,
  ).optional(),
  response_format: z.nullable(
    z.union([
      z.lazy(() =>
        ChatCompletionRequestStreamResponseFormatJSONSchema$inboundSchema
      ),
      z.lazy(() => ChatCompletionRequestStreamResponseFormatText$inboundSchema),
      z.lazy(() =>
        ChatCompletionRequestStreamResponseFormatJSONObject$inboundSchema
      ),
    ]),
  ).optional(),
  seed: z.nullable(z.number().int()).optional(),
  service_tier: z.nullable(ChatCompletionRequestStreamServiceTier$inboundSchema)
    .optional(),
  stop: z.nullable(z.array(z.string())).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream: z.boolean().default(true),
  stream_options: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamStreamOptions$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number()).optional(),
  tool_choice: z.nullable(
    z.union([
      z.lazy(() => ChatCompletionRequestStreamToolChoiceFunction$inboundSchema),
      ChatCompletionRequestStreamToolChoiceEnum$inboundSchema,
    ]),
  ).optional(),
  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),
  top_logprobs: z.nullable(z.number().int()).optional(),
  top_p: z.nullable(z.number()).optional(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "max_completion_tokens": "maxCompletionTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "presence_penalty": "presencePenalty",
    "prompt_cache_key": "promptCacheKey",
    "reasoning_effort": "reasoningEffort",
    "response_format": "responseFormat",
    "service_tier": "serviceTier",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_logprobs": "topLogprobs",
    "top_p": "topP",
  });
});

/** @internal */
export type ChatCompletionRequestStream$Outbound = {
  audio?: ChatCompletionRequestStreamAudio$Outbound | null | undefined;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  max_completion_tokens?: number | null | undefined;
  messages: Array<ChatMessage$Outbound>;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<string> | null | undefined;
  model: string;
  n?: number | null | undefined;
  parallel_tool_calls?: boolean | null | undefined;
  prediction?:
    | ChatCompletionRequestStreamPrediction$Outbound
    | null
    | undefined;
  presence_penalty?: number | null | undefined;
  prompt_cache_key?: string | null | undefined;
  reasoning_effort?: string | null | undefined;
  response_format?:
    | ChatCompletionRequestStreamResponseFormatJSONSchema$Outbound
    | ChatCompletionRequestStreamResponseFormatText$Outbound
    | ChatCompletionRequestStreamResponseFormatJSONObject$Outbound
    | null
    | undefined;
  seed?: number | null | undefined;
  service_tier?: string | null | undefined;
  stop?: Array<string> | null | undefined;
  store?: boolean | null | undefined;
  stream: boolean;
  stream_options?:
    | ChatCompletionRequestStreamStreamOptions$Outbound
    | null
    | undefined;
  temperature?: number | null | undefined;
  tool_choice?:
    | ChatCompletionRequestStreamToolChoiceFunction$Outbound
    | string
    | null
    | undefined;
  tools?: Array<Tool$Outbound> | null | undefined;
  top_logprobs?: number | null | undefined;
  top_p?: number | null | undefined;
  user?: string | null | undefined;
};

/** @internal */
export const ChatCompletionRequestStream$outboundSchema: z.ZodType<
  ChatCompletionRequestStream$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestStream
> = z.object({
  audio: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamAudio$outboundSchema),
  ).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  maxCompletionTokens: z.nullable(z.number().int()).optional(),
  messages: z.array(ChatMessage$outboundSchema),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionRequestStreamModality$outboundSchema),
  ).optional(),
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  parallelToolCalls: z.nullable(z.boolean()).optional(),
  prediction: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamPrediction$outboundSchema),
  ).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  promptCacheKey: z.nullable(z.string()).optional(),
  reasoningEffort: z.nullable(
    ChatCompletionRequestStreamReasoningEffort$outboundSchema,
  ).optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        ChatCompletionRequestStreamResponseFormatJSONSchema$outboundSchema
      ),
      z.lazy(() =>
        ChatCompletionRequestStreamResponseFormatText$outboundSchema
      ),
      z.lazy(() =>
        ChatCompletionRequestStreamResponseFormatJSONObject$outboundSchema
      ),
    ]),
  ).optional(),
  seed: z.nullable(z.number().int()).optional(),
  serviceTier: z.nullable(ChatCompletionRequestStreamServiceTier$outboundSchema)
    .optional(),
  stop: z.nullable(z.array(z.string())).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream: z.boolean().default(true),
  streamOptions: z.nullable(
    z.lazy(() => ChatCompletionRequestStreamStreamOptions$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number()).optional(),
  toolChoice: z.nullable(
    z.union([
      z.lazy(() =>
        ChatCompletionRequestStreamToolChoiceFunction$outboundSchema
      ),
      ChatCompletionRequestStreamToolChoiceEnum$outboundSchema,
    ]),
  ).optional(),
  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),
  topLogprobs: z.nullable(z.number().int()).optional(),
  topP: z.nullable(z.number()).optional(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    maxCompletionTokens: "max_completion_tokens",
    parallelToolCalls: "parallel_tool_calls",
    presencePenalty: "presence_penalty",
    promptCacheKey: "prompt_cache_key",
    reasoningEffort: "reasoning_effort",
    responseFormat: "response_format",
    serviceTier: "service_tier",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topLogprobs: "top_logprobs",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestStream$ {
  /** @deprecated use `ChatCompletionRequestStream$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestStream$inboundSchema;
  /** @deprecated use `ChatCompletionRequestStream$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionRequestStream$outboundSchema;
  /** @deprecated use `ChatCompletionRequestStream$Outbound` instead. */
  export type Outbound = ChatCompletionRequestStream$Outbound;
}

export function chatCompletionRequestStreamToJSON(
  chatCompletionRequestStream: ChatCompletionRequestStream,
): string {
  return JSON.stringify(
    ChatCompletionRequestStream$outboundSchema.parse(
      chatCompletionRequestStream,
    ),
  );
}

export function chatCompletionRequestStreamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestStream, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionRequestStream$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestStream' from JSON`,
  );
}
